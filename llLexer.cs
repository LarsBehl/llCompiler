//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ll.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ll {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class llLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, DOUBLE_LITERAL=3, INTEGER_LITERAL=4, WORD=5, MULT=6, ADD=7, 
		MINUS=8, DIV=9, DOT=10, BRAC_L=11, BRAC_R=12, CURL_L=13, CURL_R=14, SECOL=15, 
		WHITESPACE=16;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "DOUBLE_LITERAL", "INTEGER_LITERAL", "WORD", "MULT", "ADD", 
		"MINUS", "DIV", "DOT", "BRAC_L", "BRAC_R", "CURL_L", "CURL_R", "SECOL", 
		"WHITESPACE"
	};


	public llLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public llLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", "'='", null, null, null, "'*'", "'+'", "'-'", "'/'", "'.'", 
		"'('", "')'", "'{'", "'}'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "DOUBLE_LITERAL", "INTEGER_LITERAL", "WORD", "MULT", 
		"ADD", "MINUS", "DIV", "DOT", "BRAC_L", "BRAC_R", "CURL_L", "CURL_R", 
		"SECOL", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ll.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static llLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x12', 'T', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x6', '\x4', ')', '\n', '\x4', '\r', '\x4', '\xE', 
		'\x4', '*', '\x3', '\x4', '\x3', '\x4', '\x6', '\x4', '/', '\n', '\x4', 
		'\r', '\x4', '\xE', '\x4', '\x30', '\x3', '\x5', '\x6', '\x5', '\x34', 
		'\n', '\x5', '\r', '\x5', '\xE', '\x5', '\x35', '\x3', '\x6', '\x6', '\x6', 
		'\x39', '\n', '\x6', '\r', '\x6', '\xE', '\x6', ':', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x2', '\x2', '\x12', '\x3', '\x3', '\x5', '\x4', '\a', 
		'\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', '\n', 
		'\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', '\xE', '\x1B', '\xF', 
		'\x1D', '\x10', '\x1F', '\x11', '!', '\x12', '\x3', '\x2', '\x5', '\x3', 
		'\x2', '\x32', ';', '\x4', '\x2', '\x43', '\\', '\x63', '|', '\x5', '\x2', 
		'\v', '\f', '\xF', '\xF', '\"', '\"', '\x2', 'W', '\x2', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '#', '\x3', '\x2', '\x2', '\x2', '\x5', '%', '\x3', '\x2', '\x2', 
		'\x2', '\a', '(', '\x3', '\x2', '\x2', '\x2', '\t', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\v', '\x38', '\x3', '\x2', '\x2', '\x2', '\r', '<', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '>', '\x3', '\x2', '\x2', '\x2', '\x11', '@', 
		'\x3', '\x2', '\x2', '\x2', '\x13', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '\x44', '\x3', '\x2', '\x2', '\x2', '\x17', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '\x19', 'H', '\x3', '\x2', '\x2', '\x2', '\x1B', 'J', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', 'L', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'N', '\x3', '\x2', '\x2', '\x2', '!', 'P', '\x3', '\x2', '\x2', '\x2', 
		'#', '$', '\a', '.', '\x2', '\x2', '$', '\x4', '\x3', '\x2', '\x2', '\x2', 
		'%', '&', '\a', '?', '\x2', '\x2', '&', '\x6', '\x3', '\x2', '\x2', '\x2', 
		'\'', ')', '\t', '\x2', '\x2', '\x2', '(', '\'', '\x3', '\x2', '\x2', 
		'\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', 
		'\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', 
		'\x2', ',', '.', '\x5', '\x15', '\v', '\x2', '-', '/', '\t', '\x2', '\x2', 
		'\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\b', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x34', '\t', '\x2', '\x2', '\x2', '\x33', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\n', '\x3', '\x2', '\x2', '\x2', '\x37', '\x39', '\t', '\x3', 
		'\x2', '\x2', '\x38', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', ':', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ':', 
		';', '\x3', '\x2', '\x2', '\x2', ';', '\f', '\x3', '\x2', '\x2', '\x2', 
		'<', '=', '\a', ',', '\x2', '\x2', '=', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\a', '-', '\x2', '\x2', '?', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x41', '\a', '/', '\x2', '\x2', '\x41', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x43', '\a', '\x31', '\x2', '\x2', '\x43', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x45', '\a', '\x30', '\x2', '\x2', '\x45', 
		'\x16', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\a', '*', '\x2', '\x2', 
		'G', '\x18', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\a', '+', '\x2', '\x2', 
		'I', '\x1A', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '}', '\x2', '\x2', 
		'K', '\x1C', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '\x7F', '\x2', 
		'\x2', 'M', '\x1E', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '=', '\x2', 
		'\x2', 'O', ' ', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\t', '\x4', '\x2', 
		'\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\b', '\x11', '\x2', 
		'\x2', 'S', '\"', '\x3', '\x2', '\x2', '\x2', '\a', '\x2', '*', '\x30', 
		'\x35', ':', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ll
