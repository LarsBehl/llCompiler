//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ll.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ll {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class llLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOUBLE_LITERAL=1, INTEGER_LITERAL=2, RETURN=3, WORD=4, MULT=5, ADD=6, 
		MINUS=7, DIV=8, DOT=9, BRAC_L=10, BRAC_R=11, ASSIGN=12, CURL_L=13, CURL_R=14, 
		SEMCOL=15, EQUAL=16, LESS=17, GREATER=18, WHITESPACE=19;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"DOUBLE_LITERAL", "INTEGER_LITERAL", "RETURN", "WORD", "MULT", "ADD", 
		"MINUS", "DIV", "DOT", "BRAC_L", "BRAC_R", "ASSIGN", "CURL_L", "CURL_R", 
		"SEMCOL", "EQUAL", "LESS", "GREATER", "WHITESPACE"
	};


	public llLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public llLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'*'", "'+'", "'-'", "'/'", "'.'", "'('", 
		"')'", "'='", "'{'", "'}'", "';'", null, "'<'", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOUBLE_LITERAL", "INTEGER_LITERAL", "RETURN", "WORD", "MULT", "ADD", 
		"MINUS", "DIV", "DOT", "BRAC_L", "BRAC_R", "ASSIGN", "CURL_L", "CURL_R", 
		"SEMCOL", "EQUAL", "LESS", "GREATER", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ll.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static llLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x15', '\x66', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\x6', '\x2', '+', 
		'\n', '\x2', '\r', '\x2', '\xE', '\x2', ',', '\x3', '\x2', '\x3', '\x2', 
		'\x6', '\x2', '\x31', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x32', 
		'\x3', '\x3', '\x6', '\x3', '\x36', '\n', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\x37', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x6', '\x5', '\x42', 
		'\n', '\x5', '\r', '\x5', '\xE', '\x5', '\x43', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x2', 
		'\x2', '\x15', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', 
		'\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', 
		'\x17', '\r', '\x19', '\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', 
		'!', '\x12', '#', '\x13', '%', '\x14', '\'', '\x15', '\x3', '\x2', '\x5', 
		'\x3', '\x2', '\x32', ';', '\x4', '\x2', '\x43', '\\', '\x63', '|', '\x5', 
		'\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x2', 'i', '\x2', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x2', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\'', '\x3', '\x2', '\x2', '\x2', '\x3', '*', '\x3', 
		'\x2', '\x2', '\x2', '\x5', '\x35', '\x3', '\x2', '\x2', '\x2', '\a', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\t', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\v', '\x45', '\x3', '\x2', '\x2', '\x2', '\r', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\xF', 'I', '\x3', '\x2', '\x2', '\x2', '\x11', 'K', '\x3', 
		'\x2', '\x2', '\x2', '\x13', 'M', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x17', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x19', 'S', '\x3', '\x2', '\x2', '\x2', '\x1B', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', 'W', '\x3', '\x2', '\x2', '\x2', '\x1F', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '!', '[', '\x3', '\x2', '\x2', '\x2', '#', '^', '\x3', '\x2', 
		'\x2', '\x2', '%', '`', '\x3', '\x2', '\x2', '\x2', '\'', '\x62', '\x3', 
		'\x2', '\x2', '\x2', ')', '+', '\t', '\x2', '\x2', '\x2', '*', ')', '\x3', 
		'\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', 
		'\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', 
		'\x2', '\x2', '\x2', '.', '\x30', '\x5', '\x13', '\n', '\x2', '/', '\x31', 
		'\t', '\x2', '\x2', '\x2', '\x30', '/', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x33', '\x3', '\x2', '\x2', '\x2', '\x33', '\x4', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x36', '\t', '\x2', '\x2', '\x2', '\x35', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x6', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\a', 't', '\x2', '\x2', ':', ';', '\a', 'g', '\x2', '\x2', ';', 
		'<', '\a', 'v', '\x2', '\x2', '<', '=', '\a', 'w', '\x2', '\x2', '=', 
		'>', '\a', 't', '\x2', '\x2', '>', '?', '\a', 'p', '\x2', '\x2', '?', 
		'\b', '\x3', '\x2', '\x2', '\x2', '@', '\x42', '\t', '\x3', '\x2', '\x2', 
		'\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\n', '\x3', '\x2', '\x2', '\x2', 
		'\x45', '\x46', '\a', ',', '\x2', '\x2', '\x46', '\f', '\x3', '\x2', '\x2', 
		'\x2', 'G', 'H', '\a', '-', '\x2', '\x2', 'H', '\xE', '\x3', '\x2', '\x2', 
		'\x2', 'I', 'J', '\a', '/', '\x2', '\x2', 'J', '\x10', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'L', '\a', '\x31', '\x2', '\x2', 'L', '\x12', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'N', '\a', '\x30', '\x2', '\x2', 'N', '\x14', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'P', '\a', '*', '\x2', '\x2', 'P', '\x16', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'R', '\a', '+', '\x2', '\x2', 'R', '\x18', '\x3', 
		'\x2', '\x2', '\x2', 'S', 'T', '\a', '?', '\x2', '\x2', 'T', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'V', '\a', '}', '\x2', '\x2', 'V', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', 'W', 'X', '\a', '\x7F', '\x2', '\x2', 'X', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '=', '\x2', '\x2', 'Z', ' ', 
		'\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', '?', '\x2', '\x2', '\\', 
		']', '\a', '?', '\x2', '\x2', ']', '\"', '\x3', '\x2', '\x2', '\x2', '^', 
		'_', '\a', '>', '\x2', '\x2', '_', '$', '\x3', '\x2', '\x2', '\x2', '`', 
		'\x61', '\a', '@', '\x2', '\x2', '\x61', '&', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x63', '\t', '\x4', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x65', '\b', '\x14', '\x2', '\x2', '\x65', '(', 
		'\x3', '\x2', '\x2', '\x2', '\a', '\x2', ',', '\x32', '\x37', '\x43', 
		'\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ll
