//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ll.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ll {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class llLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOUBLE_LITERAL=1, INTEGER_LITERAL=2, RETURN=3, INT_TYPE=4, DOUBLE_TYPE=5, 
		BOOL_TYPE=6, WORD=7, MULT=8, ADD=9, MINUS=10, DIV=11, DOT=12, BRAC_L=13, 
		BRAC_R=14, ASSIGN=15, CURL_L=16, CURL_R=17, SEMCOL=18, EQUAL=19, LESS=20, 
		GREATER=21, COLON=22, WHITESPACE=23;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"DOUBLE_LITERAL", "INTEGER_LITERAL", "RETURN", "INT_TYPE", "DOUBLE_TYPE", 
		"BOOL_TYPE", "WORD", "MULT", "ADD", "MINUS", "DIV", "DOT", "BRAC_L", "BRAC_R", 
		"ASSIGN", "CURL_L", "CURL_R", "SEMCOL", "EQUAL", "LESS", "GREATER", "COLON", 
		"WHITESPACE"
	};


	public llLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public llLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'*'", "'+'", "'-'", "'/'", 
		"'.'", "'('", "')'", "'='", "'{'", "'}'", "';'", null, "'<'", "'>'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOUBLE_LITERAL", "INTEGER_LITERAL", "RETURN", "INT_TYPE", "DOUBLE_TYPE", 
		"BOOL_TYPE", "WORD", "MULT", "ADD", "MINUS", "DIV", "DOT", "BRAC_L", "BRAC_R", 
		"ASSIGN", "CURL_L", "CURL_R", "SEMCOL", "EQUAL", "LESS", "GREATER", "COLON", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ll.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static llLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x19', '\x80', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x3', '\x2', '\x6', '\x2', '\x33', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', '\x34', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', '\x39', 
		'\n', '\x2', '\r', '\x2', '\xE', '\x2', ':', '\x3', '\x3', '\x6', '\x3', 
		'>', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '?', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x6', '\b', 'Z', '\n', '\b', '\r', '\b', '\xE', 
		'\b', '[', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x2', '\x2', '\x19', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', 
		'\v', '\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', 
		'\f', '\x17', '\r', '\x19', '\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', 
		'\x11', '!', '\x12', '#', '\x13', '%', '\x14', '\'', '\x15', ')', '\x16', 
		'+', '\x17', '-', '\x18', '/', '\x19', '\x3', '\x2', '\x5', '\x3', '\x2', 
		'\x32', ';', '\x4', '\x2', '\x43', '\\', '\x63', '|', '\x5', '\x2', '\v', 
		'\f', '\xF', '\xF', '\"', '\"', '\x2', '\x83', '\x2', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x2', '#', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '%', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x2', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '+', '\x3', '\x2', '\x2', '\x2', '\x2', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '/', '\x3', '\x2', '\x2', '\x2', '\x3', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x5', '=', '\x3', '\x2', '\x2', '\x2', '\a', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\t', 'H', '\x3', '\x2', '\x2', '\x2', '\v', 'L', 
		'\x3', '\x2', '\x2', '\x2', '\r', 'S', '\x3', '\x2', '\x2', '\x2', '\xF', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x11', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x13', '_', '\x3', '\x2', '\x2', '\x2', '\x15', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x17', '\x63', '\x3', '\x2', '\x2', '\x2', '\x19', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', 'g', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x1F', 'k', '\x3', '\x2', '\x2', '\x2', 
		'!', 'm', '\x3', '\x2', '\x2', '\x2', '#', 'o', '\x3', '\x2', '\x2', '\x2', 
		'%', 'q', '\x3', '\x2', '\x2', '\x2', '\'', 's', '\x3', '\x2', '\x2', 
		'\x2', ')', 'v', '\x3', '\x2', '\x2', '\x2', '+', 'x', '\x3', '\x2', '\x2', 
		'\x2', '-', 'z', '\x3', '\x2', '\x2', '\x2', '/', '|', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x33', '\t', '\x2', '\x2', '\x2', '\x32', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x38', '\x5', 
		'\x19', '\r', '\x2', '\x37', '\x39', '\t', '\x2', '\x2', '\x2', '\x38', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', 
		'\x2', '\x2', ';', '\x4', '\x3', '\x2', '\x2', '\x2', '<', '>', '\t', 
		'\x2', '\x2', '\x2', '=', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', 
		'\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x6', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', 
		'\a', 't', '\x2', '\x2', '\x42', '\x43', '\a', 'g', '\x2', '\x2', '\x43', 
		'\x44', '\a', 'v', '\x2', '\x2', '\x44', '\x45', '\a', 'w', '\x2', '\x2', 
		'\x45', '\x46', '\a', 't', '\x2', '\x2', '\x46', 'G', '\a', 'p', '\x2', 
		'\x2', 'G', '\b', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\a', 'k', '\x2', 
		'\x2', 'I', 'J', '\a', 'p', '\x2', '\x2', 'J', 'K', '\a', 'v', '\x2', 
		'\x2', 'K', '\n', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '\x66', 
		'\x2', '\x2', 'M', 'N', '\a', 'q', '\x2', '\x2', 'N', 'O', '\a', 'w', 
		'\x2', '\x2', 'O', 'P', '\a', '\x64', '\x2', '\x2', 'P', 'Q', '\a', 'n', 
		'\x2', '\x2', 'Q', 'R', '\a', 'g', '\x2', '\x2', 'R', '\f', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'T', '\a', '\x64', '\x2', '\x2', 'T', 'U', '\a', 'q', 
		'\x2', '\x2', 'U', 'V', '\a', 'q', '\x2', '\x2', 'V', 'W', '\a', 'n', 
		'\x2', '\x2', 'W', '\xE', '\x3', '\x2', '\x2', '\x2', 'X', 'Z', '\t', 
		'\x3', '\x2', '\x2', 'Y', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', 
		'\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x10', '\x3', '\x2', '\x2', '\x2', 
		']', '^', '\a', ',', '\x2', '\x2', '^', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'_', '`', '\a', '-', '\x2', '\x2', '`', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '\x62', '\a', '/', '\x2', '\x2', '\x62', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x64', '\a', '\x31', '\x2', '\x2', '\x64', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\x30', '\x2', '\x2', 
		'\x66', '\x1A', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\a', '*', '\x2', 
		'\x2', 'h', '\x1C', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '+', '\x2', 
		'\x2', 'j', '\x1E', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\a', '?', '\x2', 
		'\x2', 'l', ' ', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', '}', '\x2', 
		'\x2', 'n', '\"', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\a', '\x7F', 
		'\x2', '\x2', 'p', '$', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\a', '=', 
		'\x2', '\x2', 'r', '&', '\x3', '\x2', '\x2', '\x2', 's', 't', '\a', '?', 
		'\x2', '\x2', 't', 'u', '\a', '?', '\x2', '\x2', 'u', '(', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'w', '\a', '>', '\x2', '\x2', 'w', '*', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'y', '\a', '@', '\x2', '\x2', 'y', ',', '\x3', '\x2', 
		'\x2', '\x2', 'z', '{', '\a', '<', '\x2', '\x2', '{', '.', '\x3', '\x2', 
		'\x2', '\x2', '|', '}', '\t', '\x4', '\x2', '\x2', '}', '~', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x7F', '\b', '\x18', '\x2', '\x2', '\x7F', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\a', '\x2', '\x34', ':', '?', '[', '\x3', 
		'\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ll
