//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ll.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LL {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class llParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOUBLE_LITERAL=1, INTEGER_LITERAL=2, CHAR_LITERAL=3, RETURN=4, INT_TYPE=5, 
		DOUBLE_TYPE=6, BOOL_TYPE=7, VOID_TYPE=8, CHAR_TYPE=9, BOOL_TRUE=10, BOOL_FALSE=11, 
		IF=12, ELSE=13, WHILE=14, PRINT=15, NEW=16, DESTROY=17, NULL=18, STRUCT=19, 
		LOAD=20, GLOBAL=21, WORD=22, MOD=23, MULT=24, PLUS=25, MINUS=26, DIV=27, 
		DOT=28, PAR_L=29, PAR_R=30, ASSIGN=31, CURL_L=32, CURL_R=33, BRAC_L=34, 
		BRAC_R=35, SEMCOL=36, EQUAL=37, ADD_ASSIGN=38, SUB_ASSIGN=39, MULT_ASSIGN=40, 
		DIV_ASSIGN=41, LESS=42, GREATER=43, COLON=44, COMMA=45, NOT=46, AND=47, 
		OR=48, NOT_EQUAL=49, APOSTROPHE=50, WHITESPACE=51;
	public const int
		RULE_compileUnit = 0, RULE_program = 1, RULE_compositUnit = 2, RULE_line = 3, 
		RULE_expression = 4, RULE_statement = 5, RULE_unaryExpression = 6, RULE_functionCall = 7, 
		RULE_functionDefinition = 8, RULE_variableExpression = 9, RULE_numericExpression = 10, 
		RULE_boolExpression = 11, RULE_blockStatement = 12, RULE_typeDefinition = 13, 
		RULE_incrementPostExpression = 14, RULE_decrementPostExpression = 15, 
		RULE_incrementPreExpression = 16, RULE_decrementPreExpression = 17, RULE_notExpression = 18, 
		RULE_arrayTypes = 19, RULE_arrayCreation = 20, RULE_refTypeCreation = 21, 
		RULE_arrayIndexing = 22, RULE_refTypeDestruction = 23, RULE_structProperties = 24, 
		RULE_structDefinition = 25, RULE_structName = 26, RULE_structCreation = 27, 
		RULE_structPropertyAccess = 28, RULE_loadStatement = 29, RULE_functionPrototype = 30, 
		RULE_valueAccess = 31, RULE_globalVariableStatement = 32;
	public static readonly string[] ruleNames = {
		"compileUnit", "program", "compositUnit", "line", "expression", "statement", 
		"unaryExpression", "functionCall", "functionDefinition", "variableExpression", 
		"numericExpression", "boolExpression", "blockStatement", "typeDefinition", 
		"incrementPostExpression", "decrementPostExpression", "incrementPreExpression", 
		"decrementPreExpression", "notExpression", "arrayTypes", "arrayCreation", 
		"refTypeCreation", "arrayIndexing", "refTypeDestruction", "structProperties", 
		"structDefinition", "structName", "structCreation", "structPropertyAccess", 
		"loadStatement", "functionPrototype", "valueAccess", "globalVariableStatement"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'%'", 
		"'*'", "'+'", "'-'", "'/'", "'.'", "'('", "')'", "'='", "'{'", "'}'", 
		"'['", "']'", "';'", null, null, null, null, null, "'<'", "'>'", "':'", 
		"','", "'!'", null, null, null, "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOUBLE_LITERAL", "INTEGER_LITERAL", "CHAR_LITERAL", "RETURN", "INT_TYPE", 
		"DOUBLE_TYPE", "BOOL_TYPE", "VOID_TYPE", "CHAR_TYPE", "BOOL_TRUE", "BOOL_FALSE", 
		"IF", "ELSE", "WHILE", "PRINT", "NEW", "DESTROY", "NULL", "STRUCT", "LOAD", 
		"GLOBAL", "WORD", "MOD", "MULT", "PLUS", "MINUS", "DIV", "DOT", "PAR_L", 
		"PAR_R", "ASSIGN", "CURL_L", "CURL_R", "BRAC_L", "BRAC_R", "SEMCOL", "EQUAL", 
		"ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "LESS", "GREATER", 
		"COLON", "COMMA", "NOT", "AND", "OR", "NOT_EQUAL", "APOSTROPHE", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ll.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static llParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public llParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public llParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompileUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(llParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			program();
			State = 67;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoadStatementContext[] loadStatement() {
			return GetRuleContexts<LoadStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadStatementContext loadStatement(int i) {
			return GetRuleContext<LoadStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableStatementContext[] globalVariableStatement() {
			return GetRuleContexts<GlobalVariableStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableStatementContext globalVariableStatement(int i) {
			return GetRuleContext<GlobalVariableStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext[] functionDefinition() {
			return GetRuleContexts<FunctionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition(int i) {
			return GetRuleContext<FunctionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext[] structDefinition() {
			return GetRuleContexts<StructDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext structDefinition(int i) {
			return GetRuleContext<StructDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionPrototypeContext[] functionPrototype() {
			return GetRuleContexts<FunctionPrototypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionPrototypeContext functionPrototype(int i) {
			return GetRuleContext<FunctionPrototypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompositUnitContext compositUnit() {
			return GetRuleContext<CompositUnitContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 2, RULE_program);
		int _la;
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LOAD) {
					{
					{
					State = 69;
					loadStatement();
					}
					}
					State = 74;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==GLOBAL) {
					{
					{
					State = 75;
					globalVariableStatement();
					}
					}
					State = 80;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 84;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						State = 81;
						functionDefinition();
						}
						break;
					case 2:
						{
						State = 82;
						structDefinition();
						}
						break;
					case 3:
						{
						State = 83;
						functionPrototype();
						}
						break;
					}
					}
					State = 86;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==STRUCT || _la==WORD );
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				compositUnit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CompositUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositUnitContext compositUnit() {
		CompositUnitContext _localctx = new CompositUnitContext(Context, State);
		EnterRule(_localctx, 4, RULE_compositUnit);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 92;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 6, RULE_line);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				expression(0);
				State = 97;
				Match(SEMCOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LessOperatorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(llParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(llParser.ASSIGN, 0); }
		public LessOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrOperatorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(llParser.OR, 0); }
		public OrOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinOpAddSubContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(llParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(llParser.MINUS, 0); }
		public BinOpAddSubContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinOpAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotEqualOperatorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(llParser.NOT_EQUAL, 0); }
		public NotEqualOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotEqualOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public UnaryExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinOpMultDivContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(llParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(llParser.DIV, 0); }
		public BinOpMultDivContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinOpMultDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinOpModContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(llParser.MOD, 0); }
		public BinOpModContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinOpMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		public ParenthesContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterOperatorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(llParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(llParser.ASSIGN, 0); }
		public GreaterOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityOpertorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(llParser.EQUAL, 0); }
		public EqualityOpertorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityOpertor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndOperatorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(llParser.AND, 0); }
		public AndOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PAR_L:
				{
				_localctx = new ParenthesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 102;
				Match(PAR_L);
				State = 103;
				expression(0);
				State = 104;
				Match(PAR_R);
				}
				break;
			case DOUBLE_LITERAL:
			case INTEGER_LITERAL:
			case CHAR_LITERAL:
			case BOOL_TRUE:
			case BOOL_FALSE:
			case NULL:
			case WORD:
			case PLUS:
			case MINUS:
			case NOT:
				{
				_localctx = new UnaryExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 106;
				unaryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 144;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 142;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new BinOpModContext(new ExpressionContext(_parentctx, _parentState));
						((BinOpModContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 109;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 110;
						((BinOpModContext)_localctx).op = Match(MOD);
						State = 111;
						((BinOpModContext)_localctx).right = expression(11);
						}
						break;
					case 2:
						{
						_localctx = new BinOpMultDivContext(new ExpressionContext(_parentctx, _parentState));
						((BinOpMultDivContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 112;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 113;
						((BinOpMultDivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MULT || _la==DIV) ) {
							((BinOpMultDivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 114;
						((BinOpMultDivContext)_localctx).right = expression(10);
						}
						break;
					case 3:
						{
						_localctx = new BinOpAddSubContext(new ExpressionContext(_parentctx, _parentState));
						((BinOpAddSubContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 115;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 116;
						((BinOpAddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((BinOpAddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 117;
						((BinOpAddSubContext)_localctx).right = expression(9);
						}
						break;
					case 4:
						{
						_localctx = new LessOperatorContext(new ExpressionContext(_parentctx, _parentState));
						((LessOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 118;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 119;
						((LessOperatorContext)_localctx).op = Match(LESS);
						State = 121;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ASSIGN) {
							{
							State = 120;
							Match(ASSIGN);
							}
						}

						State = 123;
						((LessOperatorContext)_localctx).right = expression(8);
						}
						break;
					case 5:
						{
						_localctx = new GreaterOperatorContext(new ExpressionContext(_parentctx, _parentState));
						((GreaterOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 124;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 125;
						((GreaterOperatorContext)_localctx).op = Match(GREATER);
						State = 127;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ASSIGN) {
							{
							State = 126;
							Match(ASSIGN);
							}
						}

						State = 129;
						((GreaterOperatorContext)_localctx).right = expression(7);
						}
						break;
					case 6:
						{
						_localctx = new EqualityOpertorContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityOpertorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 130;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 131;
						((EqualityOpertorContext)_localctx).op = Match(EQUAL);
						State = 132;
						((EqualityOpertorContext)_localctx).right = expression(6);
						}
						break;
					case 7:
						{
						_localctx = new NotEqualOperatorContext(new ExpressionContext(_parentctx, _parentState));
						((NotEqualOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 133;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 134;
						((NotEqualOperatorContext)_localctx).op = Match(NOT_EQUAL);
						State = 135;
						((NotEqualOperatorContext)_localctx).right = expression(5);
						}
						break;
					case 8:
						{
						_localctx = new AndOperatorContext(new ExpressionContext(_parentctx, _parentState));
						((AndOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 136;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 137;
						((AndOperatorContext)_localctx).op = Match(AND);
						State = 138;
						((AndOperatorContext)_localctx).right = expression(4);
						}
						break;
					case 9:
						{
						_localctx = new OrOperatorContext(new ExpressionContext(_parentctx, _parentState));
						((OrOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 139;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 140;
						((OrOperatorContext)_localctx).op = Match(OR);
						State = 141;
						((OrOperatorContext)_localctx).right = expression(3);
						}
						break;
					}
					} 
				}
				State = 146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignArrayFieldContext : StatementContext {
		public ArrayIndexingContext left;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(llParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexingContext arrayIndexing() {
			return GetRuleContext<ArrayIndexingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignArrayFieldContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignArrayField(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(llParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefTypeCreationContext refTypeCreation() {
			return GetRuleContext<RefTypeCreationContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public CompositUnitContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(llParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompositUnitContext compositUnit() {
			return GetRuleContext<CompositUnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(llParser.ELSE, 0); }
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubAssignStatementContext : StatementContext {
		public IToken left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_ASSIGN() { return GetToken(llParser.SUB_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubAssignStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		public CompositUnitContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(llParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompositUnitContext compositUnit() {
			return GetRuleContext<CompositUnitContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(llParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public PrintStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InitializationStatementContext : StatementContext {
		public IToken left;
		public TypeDefinitionContext type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(llParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(llParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefTypeCreationContext refTypeCreation() {
			return GetRuleContext<RefTypeCreationContext>(0);
		}
		public InitializationStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DestructionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public RefTypeDestructionContext refTypeDestruction() {
			return GetRuleContext<RefTypeDestructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public DestructionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultAssignStatementContext : StatementContext {
		public IToken left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_ASSIGN() { return GetToken(llParser.MULT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MultAssignStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddAssignStatementContext : StatementContext {
		public IToken left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_ASSIGN() { return GetToken(llParser.ADD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AddAssignStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStatementContext : StatementContext {
		public IToken left;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(llParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefTypeCreationContext refTypeCreation() {
			return GetRuleContext<RefTypeCreationContext>(0);
		}
		public AssignStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStructPropContext : StatementContext {
		public StructPropertyAccessContext left;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(llParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructPropertyAccessContext structPropertyAccess() {
			return GetRuleContext<StructPropertyAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefTypeCreationContext refTypeCreation() {
			return GetRuleContext<RefTypeCreationContext>(0);
		}
		public AssignStructPropContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStructProp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstantiationStatementContext : StatementContext {
		public IToken left;
		public TypeDefinitionContext type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(llParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		public InstantiationStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstantiationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivAssignStatementContext : StatementContext {
		public IToken left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN() { return GetToken(llParser.DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DivAssignStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_statement);
		int _la;
		try {
			State = 233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new AssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 147;
				((AssignStatementContext)_localctx).left = Match(WORD);
				State = 148;
				Match(ASSIGN);
				State = 151;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOUBLE_LITERAL:
				case INTEGER_LITERAL:
				case CHAR_LITERAL:
				case BOOL_TRUE:
				case BOOL_FALSE:
				case NULL:
				case WORD:
				case PLUS:
				case MINUS:
				case PAR_L:
				case NOT:
					{
					State = 149;
					expression(0);
					}
					break;
				case NEW:
					{
					State = 150;
					refTypeCreation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 153;
				Match(SEMCOL);
				}
				break;
			case 2:
				_localctx = new AssignArrayFieldContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 155;
				((AssignArrayFieldContext)_localctx).left = arrayIndexing();
				State = 156;
				Match(ASSIGN);
				{
				State = 157;
				expression(0);
				}
				State = 158;
				Match(SEMCOL);
				}
				break;
			case 3:
				_localctx = new AssignStructPropContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 160;
				((AssignStructPropContext)_localctx).left = structPropertyAccess();
				State = 161;
				Match(ASSIGN);
				State = 164;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOUBLE_LITERAL:
				case INTEGER_LITERAL:
				case CHAR_LITERAL:
				case BOOL_TRUE:
				case BOOL_FALSE:
				case NULL:
				case WORD:
				case PLUS:
				case MINUS:
				case PAR_L:
				case NOT:
					{
					State = 162;
					expression(0);
					}
					break;
				case NEW:
					{
					State = 163;
					refTypeCreation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 166;
				Match(SEMCOL);
				}
				break;
			case 4:
				_localctx = new AddAssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 168;
				((AddAssignStatementContext)_localctx).left = Match(WORD);
				State = 169;
				Match(ADD_ASSIGN);
				State = 170;
				((AddAssignStatementContext)_localctx).right = expression(0);
				State = 171;
				Match(SEMCOL);
				}
				break;
			case 5:
				_localctx = new SubAssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 173;
				((SubAssignStatementContext)_localctx).left = Match(WORD);
				State = 174;
				Match(SUB_ASSIGN);
				State = 175;
				((SubAssignStatementContext)_localctx).right = expression(0);
				State = 176;
				Match(SEMCOL);
				}
				break;
			case 6:
				_localctx = new MultAssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 178;
				((MultAssignStatementContext)_localctx).left = Match(WORD);
				State = 179;
				Match(MULT_ASSIGN);
				State = 180;
				((MultAssignStatementContext)_localctx).right = expression(0);
				State = 181;
				Match(SEMCOL);
				}
				break;
			case 7:
				_localctx = new DivAssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 183;
				((DivAssignStatementContext)_localctx).left = Match(WORD);
				State = 184;
				Match(DIV_ASSIGN);
				State = 185;
				((DivAssignStatementContext)_localctx).right = expression(0);
				State = 186;
				Match(SEMCOL);
				}
				break;
			case 8:
				_localctx = new InstantiationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 188;
				((InstantiationStatementContext)_localctx).left = Match(WORD);
				State = 189;
				Match(COLON);
				State = 190;
				((InstantiationStatementContext)_localctx).type = typeDefinition();
				State = 191;
				Match(SEMCOL);
				}
				break;
			case 9:
				_localctx = new InitializationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 193;
				((InitializationStatementContext)_localctx).left = Match(WORD);
				State = 194;
				Match(COLON);
				State = 195;
				((InitializationStatementContext)_localctx).type = typeDefinition();
				State = 196;
				Match(ASSIGN);
				State = 199;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOUBLE_LITERAL:
				case INTEGER_LITERAL:
				case CHAR_LITERAL:
				case BOOL_TRUE:
				case BOOL_FALSE:
				case NULL:
				case WORD:
				case PLUS:
				case MINUS:
				case PAR_L:
				case NOT:
					{
					State = 197;
					expression(0);
					}
					break;
				case NEW:
					{
					State = 198;
					refTypeCreation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 201;
				Match(SEMCOL);
				}
				break;
			case 10:
				_localctx = new DestructionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 203;
				refTypeDestruction();
				State = 204;
				Match(SEMCOL);
				}
				break;
			case 11:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 206;
				Match(RETURN);
				State = 209;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOUBLE_LITERAL:
				case INTEGER_LITERAL:
				case CHAR_LITERAL:
				case BOOL_TRUE:
				case BOOL_FALSE:
				case NULL:
				case WORD:
				case PLUS:
				case MINUS:
				case PAR_L:
				case NOT:
					{
					State = 207;
					expression(0);
					}
					break;
				case NEW:
					{
					State = 208;
					refTypeCreation();
					}
					break;
				case SEMCOL:
					break;
				default:
					break;
				}
				State = 211;
				Match(SEMCOL);
				}
				break;
			case 12:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 212;
				Match(IF);
				State = 213;
				Match(PAR_L);
				State = 214;
				((IfStatementContext)_localctx).cond = compositUnit();
				State = 215;
				Match(PAR_R);
				State = 216;
				blockStatement();
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 217;
					Match(ELSE);
					State = 218;
					blockStatement();
					}
				}

				}
				break;
			case 13:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 221;
				Match(WHILE);
				State = 222;
				Match(PAR_L);
				State = 223;
				((WhileStatementContext)_localctx).cond = compositUnit();
				State = 224;
				Match(PAR_R);
				State = 225;
				blockStatement();
				}
				break;
			case 14:
				_localctx = new PrintStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 227;
				Match(PRINT);
				State = 228;
				Match(PAR_L);
				State = 229;
				expression(0);
				State = 230;
				Match(PAR_R);
				State = 231;
				Match(SEMCOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExpressionContext numericExpression() {
			return GetRuleContext<NumericExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(llParser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpressionContext variableExpression() {
			return GetRuleContext<VariableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncrementPostExpressionContext incrementPostExpression() {
			return GetRuleContext<IncrementPostExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecrementPostExpressionContext decrementPostExpression() {
			return GetRuleContext<DecrementPostExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecrementPreExpressionContext decrementPreExpression() {
			return GetRuleContext<DecrementPreExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncrementPreExpressionContext incrementPreExpression() {
			return GetRuleContext<IncrementPreExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexingContext arrayIndexing() {
			return GetRuleContext<ArrayIndexingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructPropertyAccessContext structPropertyAccess() {
			return GetRuleContext<StructPropertyAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(llParser.NULL, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_unaryExpression);
		try {
			State = 248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235;
				numericExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236;
				Match(CHAR_LITERAL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 237;
				boolExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 238;
				functionCall();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 239;
				variableExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 240;
				incrementPostExpression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 241;
				decrementPostExpression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 242;
				decrementPreExpression();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 243;
				incrementPreExpression();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 244;
				notExpression();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 245;
				arrayIndexing();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 246;
				structPropertyAccess();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 247;
				Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(llParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(llParser.COMMA, i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			_localctx.name = Match(WORD);
			State = 251;
			Match(PAR_L);
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE_LITERAL) | (1L << INTEGER_LITERAL) | (1L << CHAR_LITERAL) | (1L << BOOL_TRUE) | (1L << BOOL_FALSE) | (1L << NULL) | (1L << WORD) | (1L << PLUS) | (1L << MINUS) | (1L << PAR_L) | (1L << NOT))) != 0)) {
				{
				State = 252;
				expression(0);
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 253;
					Match(COMMA);
					State = 254;
					expression(0);
					}
					}
					State = 259;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 262;
			Match(PAR_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public IToken name;
		public BlockStatementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(llParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(llParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext[] typeDefinition() {
			return GetRuleContexts<TypeDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext typeDefinition(int i) {
			return GetRuleContext<TypeDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(llParser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(llParser.WORD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(llParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(llParser.COMMA, i);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			_localctx.name = Match(WORD);
			State = 265;
			Match(PAR_L);
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORD) {
				{
				State = 266;
				Match(WORD);
				State = 267;
				Match(COLON);
				State = 268;
				typeDefinition();
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 269;
					Match(COMMA);
					State = 270;
					Match(WORD);
					State = 271;
					Match(COLON);
					State = 272;
					typeDefinition();
					}
					}
					State = 277;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 280;
			Match(PAR_R);
			State = 281;
			Match(COLON);
			State = 282;
			typeDefinition();
			State = 283;
			_localctx.body = blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public VariableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableExpressionContext variableExpression() {
		VariableExpressionContext _localctx = new VariableExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericExpressionContext : ParserRuleContext {
		public NumericExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericExpression; } }
	 
		public NumericExpressionContext() { }
		public virtual void CopyFrom(NumericExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntegerAtomExpressionContext : NumericExpressionContext {
		public IToken sign;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(llParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(llParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(llParser.PLUS, 0); }
		public IntegerAtomExpressionContext(NumericExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerAtomExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleAtomExpressionContext : NumericExpressionContext {
		public IToken sign;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_LITERAL() { return GetToken(llParser.DOUBLE_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(llParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(llParser.PLUS, 0); }
		public DoubleAtomExpressionContext(NumericExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleAtomExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericExpressionContext numericExpression() {
		NumericExpressionContext _localctx = new NumericExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_numericExpression);
		int _la;
		try {
			State = 295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				_localctx = new DoubleAtomExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 287;
					((DoubleAtomExpressionContext)_localctx).sign = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
						((DoubleAtomExpressionContext)_localctx).sign = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 290;
				Match(DOUBLE_LITERAL);
				}
				break;
			case 2:
				_localctx = new IntegerAtomExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 291;
					((IntegerAtomExpressionContext)_localctx).sign = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
						((IntegerAtomExpressionContext)_localctx).sign = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 294;
				Match(INTEGER_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_TRUE() { return GetToken(llParser.BOOL_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_FALSE() { return GetToken(llParser.BOOL_FALSE, 0); }
		public BoolExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExpressionContext boolExpression() {
		BoolExpressionContext _localctx = new BoolExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_boolExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			_la = TokenStream.LA(1);
			if ( !(_la==BOOL_TRUE || _la==BOOL_FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURL_L() { return GetToken(llParser.CURL_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURL_R() { return GetToken(llParser.CURL_R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_blockStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(CURL_L);
			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE_LITERAL) | (1L << INTEGER_LITERAL) | (1L << CHAR_LITERAL) | (1L << RETURN) | (1L << BOOL_TRUE) | (1L << BOOL_FALSE) | (1L << IF) | (1L << WHILE) | (1L << PRINT) | (1L << DESTROY) | (1L << NULL) | (1L << WORD) | (1L << PLUS) | (1L << MINUS) | (1L << PAR_L) | (1L << NOT))) != 0)) {
				{
				{
				State = 300;
				line();
				}
				}
				State = 305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 306;
			Match(CURL_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_TYPE() { return GetToken(llParser.INT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_TYPE() { return GetToken(llParser.DOUBLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_TYPE() { return GetToken(llParser.BOOL_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID_TYPE() { return GetToken(llParser.VOID_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_TYPE() { return GetToken(llParser.CHAR_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypesContext arrayTypes() {
			return GetRuleContext<ArrayTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructNameContext structName() {
			return GetRuleContext<StructNameContext>(0);
		}
		public TypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefinitionContext typeDefinition() {
		TypeDefinitionContext _localctx = new TypeDefinitionContext(Context, State);
		EnterRule(_localctx, 26, RULE_typeDefinition);
		try {
			State = 315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 308;
				Match(INT_TYPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 309;
				Match(DOUBLE_TYPE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 310;
				Match(BOOL_TYPE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 311;
				Match(VOID_TYPE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 312;
				Match(CHAR_TYPE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 313;
				arrayTypes();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 314;
				structName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementPostExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(llParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(llParser.PLUS, i);
		}
		public IncrementPostExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incrementPostExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementPostExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementPostExpressionContext incrementPostExpression() {
		IncrementPostExpressionContext _localctx = new IncrementPostExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_incrementPostExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			valueAccess();
			State = 318;
			Match(PLUS);
			State = 319;
			Match(PLUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecrementPostExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(llParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(llParser.MINUS, i);
		}
		public DecrementPostExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decrementPostExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrementPostExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecrementPostExpressionContext decrementPostExpression() {
		DecrementPostExpressionContext _localctx = new DecrementPostExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_decrementPostExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			valueAccess();
			State = 322;
			Match(MINUS);
			State = 323;
			Match(MINUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementPreExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(llParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(llParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public IncrementPreExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incrementPreExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementPreExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementPreExpressionContext incrementPreExpression() {
		IncrementPreExpressionContext _localctx = new IncrementPreExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_incrementPreExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			Match(PLUS);
			State = 326;
			Match(PLUS);
			State = 327;
			valueAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecrementPreExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(llParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(llParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public DecrementPreExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decrementPreExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrementPreExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecrementPreExpressionContext decrementPreExpression() {
		DecrementPreExpressionContext _localctx = new DecrementPreExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_decrementPreExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			Match(MINUS);
			State = 330;
			Match(MINUS);
			State = 331;
			valueAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(llParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_notExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			Match(NOT);
			State = 334;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypesContext : ParserRuleContext {
		public ArrayTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTypes; } }
	 
		public ArrayTypesContext() { }
		public virtual void CopyFrom(ArrayTypesContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolArrayTypeContext : ArrayTypesContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_TYPE() { return GetToken(llParser.BOOL_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public BoolArrayTypeContext(ArrayTypesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntArrayTypeContext : ArrayTypesContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_TYPE() { return GetToken(llParser.INT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public IntArrayTypeContext(ArrayTypesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharArrayTypeContext : ArrayTypesContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_TYPE() { return GetToken(llParser.CHAR_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public CharArrayTypeContext(ArrayTypesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleArrayTypeContext : ArrayTypesContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_TYPE() { return GetToken(llParser.DOUBLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public DoubleArrayTypeContext(ArrayTypesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypesContext arrayTypes() {
		ArrayTypesContext _localctx = new ArrayTypesContext(Context, State);
		EnterRule(_localctx, 38, RULE_arrayTypes);
		try {
			State = 348;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_TYPE:
				_localctx = new IntArrayTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 336;
				Match(INT_TYPE);
				State = 337;
				Match(BRAC_L);
				State = 338;
				Match(BRAC_R);
				}
				break;
			case DOUBLE_TYPE:
				_localctx = new DoubleArrayTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 339;
				Match(DOUBLE_TYPE);
				State = 340;
				Match(BRAC_L);
				State = 341;
				Match(BRAC_R);
				}
				break;
			case BOOL_TYPE:
				_localctx = new BoolArrayTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 342;
				Match(BOOL_TYPE);
				State = 343;
				Match(BRAC_L);
				State = 344;
				Match(BRAC_R);
				}
				break;
			case CHAR_TYPE:
				_localctx = new CharArrayTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 345;
				Match(CHAR_TYPE);
				State = 346;
				Match(BRAC_L);
				State = 347;
				Match(BRAC_R);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreationContext : ParserRuleContext {
		public ArrayCreationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreation; } }
	 
		public ArrayCreationContext() { }
		public virtual void CopyFrom(ArrayCreationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntArrayCreationContext : ArrayCreationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_TYPE() { return GetToken(llParser.INT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public IntArrayCreationContext(ArrayCreationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntArrayCreation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolArrayCreationContext : ArrayCreationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_TYPE() { return GetToken(llParser.BOOL_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public BoolArrayCreationContext(ArrayCreationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolArrayCreation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharArrayCreationContext : ArrayCreationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_TYPE() { return GetToken(llParser.CHAR_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public CharArrayCreationContext(ArrayCreationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharArrayCreation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleArrayCreationContext : ArrayCreationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_TYPE() { return GetToken(llParser.DOUBLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public DoubleArrayCreationContext(ArrayCreationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleArrayCreation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreationContext arrayCreation() {
		ArrayCreationContext _localctx = new ArrayCreationContext(Context, State);
		EnterRule(_localctx, 40, RULE_arrayCreation);
		try {
			State = 370;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_TYPE:
				_localctx = new IntArrayCreationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 350;
				Match(INT_TYPE);
				State = 351;
				Match(BRAC_L);
				State = 352;
				expression(0);
				State = 353;
				Match(BRAC_R);
				}
				break;
			case DOUBLE_TYPE:
				_localctx = new DoubleArrayCreationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 355;
				Match(DOUBLE_TYPE);
				State = 356;
				Match(BRAC_L);
				State = 357;
				expression(0);
				State = 358;
				Match(BRAC_R);
				}
				break;
			case BOOL_TYPE:
				_localctx = new BoolArrayCreationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 360;
				Match(BOOL_TYPE);
				State = 361;
				Match(BRAC_L);
				State = 362;
				expression(0);
				State = 363;
				Match(BRAC_R);
				}
				break;
			case CHAR_TYPE:
				_localctx = new CharArrayCreationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 365;
				Match(CHAR_TYPE);
				State = 366;
				Match(BRAC_L);
				State = 367;
				expression(0);
				State = 368;
				Match(BRAC_R);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefTypeCreationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(llParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayCreationContext arrayCreation() {
			return GetRuleContext<ArrayCreationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructCreationContext structCreation() {
			return GetRuleContext<StructCreationContext>(0);
		}
		public RefTypeCreationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refTypeCreation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefTypeCreation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefTypeCreationContext refTypeCreation() {
		RefTypeCreationContext _localctx = new RefTypeCreationContext(Context, State);
		EnterRule(_localctx, 42, RULE_refTypeCreation);
		try {
			State = 376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 372;
				Match(NEW);
				State = 373;
				arrayCreation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 374;
				Match(NEW);
				State = 375;
				structCreation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpressionContext variableExpression() {
			return GetRuleContext<VariableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public ArrayIndexingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndexing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndexing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexingContext arrayIndexing() {
		ArrayIndexingContext _localctx = new ArrayIndexingContext(Context, State);
		EnterRule(_localctx, 44, RULE_arrayIndexing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			variableExpression();
			State = 379;
			Match(BRAC_L);
			State = 380;
			expression(0);
			State = 381;
			Match(BRAC_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefTypeDestructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESTROY() { return GetToken(llParser.DESTROY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public RefTypeDestructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refTypeDestruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefTypeDestruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefTypeDestructionContext refTypeDestruction() {
		RefTypeDestructionContext _localctx = new RefTypeDestructionContext(Context, State);
		EnterRule(_localctx, 46, RULE_refTypeDestruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			Match(DESTROY);
			State = 384;
			valueAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructPropertiesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(llParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public StructPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structProperties; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructPropertiesContext structProperties() {
		StructPropertiesContext _localctx = new StructPropertiesContext(Context, State);
		EnterRule(_localctx, 48, RULE_structProperties);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			Match(WORD);
			State = 387;
			Match(COLON);
			State = 388;
			typeDefinition();
			State = 389;
			Match(SEMCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(llParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURL_L() { return GetToken(llParser.CURL_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURL_R() { return GetToken(llParser.CURL_R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructPropertiesContext[] structProperties() {
			return GetRuleContexts<StructPropertiesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructPropertiesContext structProperties(int i) {
			return GetRuleContext<StructPropertiesContext>(i);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 50, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			Match(STRUCT);
			State = 392;
			Match(WORD);
			State = 393;
			Match(CURL_L);
			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 394;
				structProperties();
				}
				}
				State = 397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WORD );
			State = 399;
			Match(CURL_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public StructNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructNameContext structName() {
		StructNameContext _localctx = new StructNameContext(Context, State);
		EnterRule(_localctx, 52, RULE_structName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructCreationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructNameContext structName() {
			return GetRuleContext<StructNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		public StructCreationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structCreation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructCreation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructCreationContext structCreation() {
		StructCreationContext _localctx = new StructCreationContext(Context, State);
		EnterRule(_localctx, 54, RULE_structCreation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			structName();
			State = 404;
			Match(PAR_L);
			State = 405;
			Match(PAR_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructPropertyAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpressionContext variableExpression() {
			return GetRuleContext<VariableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(llParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public StructPropertyAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structPropertyAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructPropertyAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructPropertyAccessContext structPropertyAccess() {
		StructPropertyAccessContext _localctx = new StructPropertyAccessContext(Context, State);
		EnterRule(_localctx, 56, RULE_structPropertyAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			variableExpression();
			State = 408;
			Match(DOT);
			State = 409;
			valueAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStatementContext : ParserRuleContext {
		public IToken fileName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(llParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public LoadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadStatementContext loadStatement() {
		LoadStatementContext _localctx = new LoadStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_loadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			Match(LOAD);
			State = 412;
			_localctx.fileName = Match(WORD);
			State = 413;
			Match(SEMCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionPrototypeContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(llParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(llParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext[] typeDefinition() {
			return GetRuleContexts<TypeDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext typeDefinition(int i) {
			return GetRuleContext<TypeDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(llParser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(llParser.WORD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(llParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(llParser.COMMA, i);
		}
		public FunctionPrototypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionPrototype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionPrototype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionPrototypeContext functionPrototype() {
		FunctionPrototypeContext _localctx = new FunctionPrototypeContext(Context, State);
		EnterRule(_localctx, 60, RULE_functionPrototype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			_localctx.name = Match(WORD);
			State = 416;
			Match(PAR_L);
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORD) {
				{
				State = 417;
				Match(WORD);
				State = 418;
				Match(COLON);
				State = 419;
				typeDefinition();
				State = 426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 420;
					Match(COMMA);
					State = 421;
					Match(WORD);
					State = 422;
					Match(COLON);
					State = 423;
					typeDefinition();
					}
					}
					State = 428;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 431;
			Match(PAR_R);
			State = 432;
			Match(COLON);
			State = 433;
			typeDefinition();
			State = 434;
			Match(SEMCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpressionContext variableExpression() {
			return GetRuleContext<VariableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexingContext arrayIndexing() {
			return GetRuleContext<ArrayIndexingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructPropertyAccessContext structPropertyAccess() {
			return GetRuleContext<StructPropertyAccessContext>(0);
		}
		public ValueAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueAccessContext valueAccess() {
		ValueAccessContext _localctx = new ValueAccessContext(Context, State);
		EnterRule(_localctx, 62, RULE_valueAccess);
		try {
			State = 439;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 436;
				variableExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 437;
				arrayIndexing();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 438;
				structPropertyAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableStatementContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(llParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(llParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(llParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(llParser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericExpressionContext numericExpression() {
			return GetRuleContext<NumericExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefTypeCreationContext refTypeCreation() {
			return GetRuleContext<RefTypeCreationContext>(0);
		}
		public GlobalVariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableStatementContext globalVariableStatement() {
		GlobalVariableStatementContext _localctx = new GlobalVariableStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_globalVariableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			Match(GLOBAL);
			State = 442;
			_localctx.name = Match(WORD);
			State = 443;
			Match(COLON);
			State = 444;
			typeDefinition();
			State = 445;
			Match(EQUAL);
			State = 450;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_LITERAL:
				{
				State = 446;
				Match(CHAR_LITERAL);
				}
				break;
			case DOUBLE_LITERAL:
			case INTEGER_LITERAL:
			case PLUS:
			case MINUS:
				{
				State = 447;
				numericExpression();
				}
				break;
			case BOOL_TRUE:
			case BOOL_FALSE:
				{
				State = 448;
				boolExpression();
				}
				break;
			case NEW:
				{
				State = 449;
				refTypeCreation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		case 5: return Precpred(Context, 5);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x35', '\x1C7', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', '\x3', 'I', '\n', 
		'\x3', '\f', '\x3', '\xE', '\x3', 'L', '\v', '\x3', '\x3', '\x3', '\a', 
		'\x3', 'O', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'R', '\v', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', 'W', '\n', '\x3', 
		'\r', '\x3', '\xE', '\x3', 'X', '\x3', '\x3', '\x5', '\x3', '\\', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '`', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x66', 
		'\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'n', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '|', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '\x82', '\n', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x91', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', '\x94', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\x9A', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xA7', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\xCA', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\xD4', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\xDE', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xEC', '\n', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\xFB', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x102', 
		'\n', '\t', '\f', '\t', '\xE', '\t', '\x105', '\v', '\t', '\x5', '\t', 
		'\x107', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\a', '\n', '\x114', '\n', '\n', '\f', '\n', '\xE', 
		'\n', '\x117', '\v', '\n', '\x5', '\n', '\x119', '\n', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x5', '\f', '\x123', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\x127', '\n', '\f', '\x3', '\f', '\x5', '\f', '\x12A', 
		'\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\a', 
		'\xE', '\x130', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x133', '\v', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x13E', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x15F', '\n', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\x175', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x17B', '\n', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x6', '\x1B', '\x18E', '\n', '\x1B', '\r', '\x1B', 
		'\xE', '\x1B', '\x18F', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\a', ' ', '\x1AB', '\n', ' ', '\f', ' ', '\xE', ' ', '\x1AE', '\v', ' ', 
		'\x5', ' ', '\x1B0', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x1BA', 
		'\n', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', 
		'\x1C5', '\n', '\"', '\x3', '\"', '\x2', '\x3', '\n', '#', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x2', '\x5', 
		'\x4', '\x2', '\x1A', '\x1A', '\x1D', '\x1D', '\x3', '\x2', '\x1B', '\x1C', 
		'\x3', '\x2', '\f', '\r', '\x2', '\x1F5', '\x2', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '[', '\x3', '\x2', '\x2', '\x2', '\x6', '_', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x65', '\x3', '\x2', '\x2', '\x2', '\n', 'm', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\xFA', '\x3', '\x2', '\x2', '\x2', '\x10', '\xFC', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x14', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x12D', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x13F', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\x147', '\x3', '\x2', '\x2', '\x2', '$', '\x14B', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x14F', '\x3', '\x2', '\x2', '\x2', '(', '\x15E', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x174', '\x3', '\x2', '\x2', '\x2', 
		',', '\x17A', '\x3', '\x2', '\x2', '\x2', '.', '\x17C', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x181', '\x3', '\x2', '\x2', '\x2', '\x32', '\x184', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x189', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x193', '\x3', '\x2', '\x2', '\x2', '\x38', '\x195', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x199', '\x3', '\x2', '\x2', '\x2', '<', '\x19D', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x1A1', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x42', '\x1BB', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x45', '\x5', '\x4', '\x3', '\x2', '\x45', '\x46', 
		'\a', '\x2', '\x2', '\x3', '\x46', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'G', 'I', '\x5', '<', '\x1F', '\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 
		'I', 'L', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 
		'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', 'P', '\x3', '\x2', '\x2', '\x2', 
		'L', 'J', '\x3', '\x2', '\x2', '\x2', 'M', 'O', '\x5', '\x42', '\"', '\x2', 
		'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'R', '\x3', '\x2', '\x2', '\x2', 
		'P', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'V', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 
		'S', 'W', '\x5', '\x12', '\n', '\x2', 'T', 'W', '\x5', '\x34', '\x1B', 
		'\x2', 'U', 'W', '\x5', '>', ' ', '\x2', 'V', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', '\\', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\\', '\x5', '\x6', '\x4', '\x2', '[', 'J', '\x3', 
		'\x2', '\x2', '\x2', '[', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', '\x5', 
		'\x3', '\x2', '\x2', '\x2', ']', '`', '\x5', '\f', '\a', '\x2', '^', '`', 
		'\x5', '\n', '\x6', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', 
		'^', '\x3', '\x2', '\x2', '\x2', '`', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '\x66', '\x5', '\f', '\a', '\x2', '\x62', '\x63', '\x5', '\n', 
		'\x6', '\x2', '\x63', '\x64', '\a', '&', '\x2', '\x2', '\x64', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x62', '\x3', '\x2', '\x2', '\x2', '\x66', '\t', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'h', '\b', '\x6', '\x1', '\x2', 'h', 'i', '\a', '\x1F', 
		'\x2', '\x2', 'i', 'j', '\x5', '\n', '\x6', '\x2', 'j', 'k', '\a', ' ', 
		'\x2', '\x2', 'k', 'n', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\x5', '\xE', 
		'\b', '\x2', 'm', 'g', '\x3', '\x2', '\x2', '\x2', 'm', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x92', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\f', 
		'\f', '\x2', '\x2', 'p', 'q', '\a', '\x19', '\x2', '\x2', 'q', '\x91', 
		'\x5', '\n', '\x6', '\r', 'r', 's', '\f', '\v', '\x2', '\x2', 's', 't', 
		'\t', '\x2', '\x2', '\x2', 't', '\x91', '\x5', '\n', '\x6', '\f', 'u', 
		'v', '\f', '\n', '\x2', '\x2', 'v', 'w', '\t', '\x3', '\x2', '\x2', 'w', 
		'\x91', '\x5', '\n', '\x6', '\v', 'x', 'y', '\f', '\t', '\x2', '\x2', 
		'y', '{', '\a', ',', '\x2', '\x2', 'z', '|', '\a', '!', '\x2', '\x2', 
		'{', 'z', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', 
		'|', '}', '\x3', '\x2', '\x2', '\x2', '}', '\x91', '\x5', '\n', '\x6', 
		'\n', '~', '\x7F', '\f', '\b', '\x2', '\x2', '\x7F', '\x81', '\a', '-', 
		'\x2', '\x2', '\x80', '\x82', '\a', '!', '\x2', '\x2', '\x81', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x91', '\x5', '\n', 
		'\x6', '\t', '\x84', '\x85', '\f', '\a', '\x2', '\x2', '\x85', '\x86', 
		'\a', '\'', '\x2', '\x2', '\x86', '\x91', '\x5', '\n', '\x6', '\b', '\x87', 
		'\x88', '\f', '\x6', '\x2', '\x2', '\x88', '\x89', '\a', '\x33', '\x2', 
		'\x2', '\x89', '\x91', '\x5', '\n', '\x6', '\a', '\x8A', '\x8B', '\f', 
		'\x5', '\x2', '\x2', '\x8B', '\x8C', '\a', '\x31', '\x2', '\x2', '\x8C', 
		'\x91', '\x5', '\n', '\x6', '\x6', '\x8D', '\x8E', '\f', '\x4', '\x2', 
		'\x2', '\x8E', '\x8F', '\a', '\x32', '\x2', '\x2', '\x8F', '\x91', '\x5', 
		'\n', '\x6', '\x5', '\x90', 'o', '\x3', '\x2', '\x2', '\x2', '\x90', 'r', 
		'\x3', '\x2', '\x2', '\x2', '\x90', 'u', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'x', '\x3', '\x2', '\x2', '\x2', '\x90', '~', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x84', '\x3', '\x2', '\x2', '\x2', '\x90', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x94', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x93', '\v', '\x3', '\x2', '\x2', '\x2', '\x94', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\a', '\x18', '\x2', '\x2', 
		'\x96', '\x99', '\a', '!', '\x2', '\x2', '\x97', '\x9A', '\x5', '\n', 
		'\x6', '\x2', '\x98', '\x9A', '\x5', ',', '\x17', '\x2', '\x99', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x99', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\a', '&', 
		'\x2', '\x2', '\x9C', '\xEC', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', 
		'\x5', '.', '\x18', '\x2', '\x9E', '\x9F', '\a', '!', '\x2', '\x2', '\x9F', 
		'\xA0', '\x5', '\n', '\x6', '\x2', '\xA0', '\xA1', '\a', '&', '\x2', '\x2', 
		'\xA1', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x5', ':', 
		'\x1E', '\x2', '\xA3', '\xA6', '\a', '!', '\x2', '\x2', '\xA4', '\xA7', 
		'\x5', '\n', '\x6', '\x2', '\xA5', '\xA7', '\x5', ',', '\x17', '\x2', 
		'\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', 
		'\a', '&', '\x2', '\x2', '\xA9', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xAB', '\a', '\x18', '\x2', '\x2', '\xAB', '\xAC', '\a', '(', '\x2', 
		'\x2', '\xAC', '\xAD', '\x5', '\n', '\x6', '\x2', '\xAD', '\xAE', '\a', 
		'&', '\x2', '\x2', '\xAE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xB0', '\a', '\x18', '\x2', '\x2', '\xB0', '\xB1', '\a', ')', '\x2', 
		'\x2', '\xB1', '\xB2', '\x5', '\n', '\x6', '\x2', '\xB2', '\xB3', '\a', 
		'&', '\x2', '\x2', '\xB3', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB5', '\a', '\x18', '\x2', '\x2', '\xB5', '\xB6', '\a', '*', '\x2', 
		'\x2', '\xB6', '\xB7', '\x5', '\n', '\x6', '\x2', '\xB7', '\xB8', '\a', 
		'&', '\x2', '\x2', '\xB8', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xBA', '\a', '\x18', '\x2', '\x2', '\xBA', '\xBB', '\a', '+', '\x2', 
		'\x2', '\xBB', '\xBC', '\x5', '\n', '\x6', '\x2', '\xBC', '\xBD', '\a', 
		'&', '\x2', '\x2', '\xBD', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xBF', '\a', '\x18', '\x2', '\x2', '\xBF', '\xC0', '\a', '.', '\x2', 
		'\x2', '\xC0', '\xC1', '\x5', '\x1C', '\xF', '\x2', '\xC1', '\xC2', '\a', 
		'&', '\x2', '\x2', '\xC2', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC4', '\a', '\x18', '\x2', '\x2', '\xC4', '\xC5', '\a', '.', '\x2', 
		'\x2', '\xC5', '\xC6', '\x5', '\x1C', '\xF', '\x2', '\xC6', '\xC9', '\a', 
		'!', '\x2', '\x2', '\xC7', '\xCA', '\x5', '\n', '\x6', '\x2', '\xC8', 
		'\xCA', '\x5', ',', '\x17', '\x2', '\xC9', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xCC', '\a', '&', '\x2', '\x2', '\xCC', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\x5', '\x30', '\x19', 
		'\x2', '\xCE', '\xCF', '\a', '&', '\x2', '\x2', '\xCF', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xD3', '\a', '\x6', '\x2', '\x2', '\xD1', 
		'\xD4', '\x5', '\n', '\x6', '\x2', '\xD2', '\xD4', '\x5', ',', '\x17', 
		'\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xEC', '\a', '&', '\x2', 
		'\x2', '\xD6', '\xD7', '\a', '\xE', '\x2', '\x2', '\xD7', '\xD8', '\a', 
		'\x1F', '\x2', '\x2', '\xD8', '\xD9', '\x5', '\x6', '\x4', '\x2', '\xD9', 
		'\xDA', '\a', ' ', '\x2', '\x2', '\xDA', '\xDD', '\x5', '\x1A', '\xE', 
		'\x2', '\xDB', '\xDC', '\a', '\xF', '\x2', '\x2', '\xDC', '\xDE', '\x5', 
		'\x1A', '\xE', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\xE0', '\a', '\x10', '\x2', '\x2', '\xE0', '\xE1', '\a', 
		'\x1F', '\x2', '\x2', '\xE1', '\xE2', '\x5', '\x6', '\x4', '\x2', '\xE2', 
		'\xE3', '\a', ' ', '\x2', '\x2', '\xE3', '\xE4', '\x5', '\x1A', '\xE', 
		'\x2', '\xE4', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\a', 
		'\x11', '\x2', '\x2', '\xE6', '\xE7', '\a', '\x1F', '\x2', '\x2', '\xE7', 
		'\xE8', '\x5', '\n', '\x6', '\x2', '\xE8', '\xE9', '\a', ' ', '\x2', '\x2', 
		'\xE9', '\xEA', '\a', '&', '\x2', '\x2', '\xEA', '\xEC', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\x95', '\x3', '\x2', '\x2', '\x2', '\xEB', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\xEB', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xEB', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xAF', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\xEB', '\xBE', '\x3', '\x2', '\x2', '\x2', 
		'\xEB', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xCD', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xD6', 
		'\x3', '\x2', '\x2', '\x2', '\xEB', '\xDF', '\x3', '\x2', '\x2', '\x2', 
		'\xEB', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xEC', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\xED', '\xFB', '\x5', '\x16', '\f', '\x2', '\xEE', '\xFB', 
		'\a', '\x5', '\x2', '\x2', '\xEF', '\xFB', '\x5', '\x18', '\r', '\x2', 
		'\xF0', '\xFB', '\x5', '\x10', '\t', '\x2', '\xF1', '\xFB', '\x5', '\x14', 
		'\v', '\x2', '\xF2', '\xFB', '\x5', '\x1E', '\x10', '\x2', '\xF3', '\xFB', 
		'\x5', ' ', '\x11', '\x2', '\xF4', '\xFB', '\x5', '$', '\x13', '\x2', 
		'\xF5', '\xFB', '\x5', '\"', '\x12', '\x2', '\xF6', '\xFB', '\x5', '&', 
		'\x14', '\x2', '\xF7', '\xFB', '\x5', '.', '\x18', '\x2', '\xF8', '\xFB', 
		'\x5', ':', '\x1E', '\x2', '\xF9', '\xFB', '\a', '\x14', '\x2', '\x2', 
		'\xFA', '\xED', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xEE', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xF0', 
		'\x3', '\x2', '\x2', '\x2', '\xFA', '\xF1', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xF5', 
		'\x3', '\x2', '\x2', '\x2', '\xFA', '\xF6', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xF8', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\a', '\x18', '\x2', '\x2', 
		'\xFD', '\x106', '\a', '\x1F', '\x2', '\x2', '\xFE', '\x103', '\x5', '\n', 
		'\x6', '\x2', '\xFF', '\x100', '\a', '/', '\x2', '\x2', '\x100', '\x102', 
		'\x5', '\n', '\x6', '\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x105', '\x3', '\x2', '\x2', '\x2', '\x103', '\x101', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x105', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x108', '\x109', '\a', ' ', '\x2', '\x2', '\x109', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x10A', '\x10B', '\a', '\x18', '\x2', '\x2', '\x10B', '\x118', 
		'\a', '\x1F', '\x2', '\x2', '\x10C', '\x10D', '\a', '\x18', '\x2', '\x2', 
		'\x10D', '\x10E', '\a', '.', '\x2', '\x2', '\x10E', '\x115', '\x5', '\x1C', 
		'\xF', '\x2', '\x10F', '\x110', '\a', '/', '\x2', '\x2', '\x110', '\x111', 
		'\a', '\x18', '\x2', '\x2', '\x111', '\x112', '\a', '.', '\x2', '\x2', 
		'\x112', '\x114', '\x5', '\x1C', '\xF', '\x2', '\x113', '\x10F', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x117', '\x3', '\x2', '\x2', '\x2', '\x115', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x116', '\x119', '\x3', '\x2', '\x2', '\x2', '\x117', '\x115', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x118', '\x119', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '\x11A', '\x11B', '\a', ' ', '\x2', '\x2', '\x11B', 
		'\x11C', '\a', '.', '\x2', '\x2', '\x11C', '\x11D', '\x5', '\x1C', '\xF', 
		'\x2', '\x11D', '\x11E', '\x5', '\x1A', '\xE', '\x2', '\x11E', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\a', '\x18', '\x2', '\x2', 
		'\x120', '\x15', '\x3', '\x2', '\x2', '\x2', '\x121', '\x123', '\t', '\x3', 
		'\x2', '\x2', '\x122', '\x121', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x12A', '\a', '\x3', '\x2', '\x2', '\x125', '\x127', '\t', '\x3', 
		'\x2', '\x2', '\x126', '\x125', '\x3', '\x2', '\x2', '\x2', '\x126', '\x127', 
		'\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\x12A', '\a', '\x4', '\x2', '\x2', '\x129', '\x122', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x126', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\t', '\x4', '\x2', 
		'\x2', '\x12C', '\x19', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x131', 
		'\a', '\"', '\x2', '\x2', '\x12E', '\x130', '\x5', '\b', '\x5', '\x2', 
		'\x12F', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x130', '\x133', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x131', 
		'\x132', '\x3', '\x2', '\x2', '\x2', '\x132', '\x134', '\x3', '\x2', '\x2', 
		'\x2', '\x133', '\x131', '\x3', '\x2', '\x2', '\x2', '\x134', '\x135', 
		'\a', '#', '\x2', '\x2', '\x135', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x136', '\x13E', '\a', '\a', '\x2', '\x2', '\x137', '\x13E', '\a', '\b', 
		'\x2', '\x2', '\x138', '\x13E', '\a', '\t', '\x2', '\x2', '\x139', '\x13E', 
		'\a', '\n', '\x2', '\x2', '\x13A', '\x13E', '\a', '\v', '\x2', '\x2', 
		'\x13B', '\x13E', '\x5', '(', '\x15', '\x2', '\x13C', '\x13E', '\x5', 
		'\x36', '\x1C', '\x2', '\x13D', '\x136', '\x3', '\x2', '\x2', '\x2', '\x13D', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x138', '\x3', '\x2', '\x2', 
		'\x2', '\x13D', '\x139', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '\x13D', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\x13D', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x13F', '\x140', '\x5', '@', '!', '\x2', '\x140', 
		'\x141', '\a', '\x1B', '\x2', '\x2', '\x141', '\x142', '\a', '\x1B', '\x2', 
		'\x2', '\x142', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', 
		'\x5', '@', '!', '\x2', '\x144', '\x145', '\a', '\x1C', '\x2', '\x2', 
		'\x145', '\x146', '\a', '\x1C', '\x2', '\x2', '\x146', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x147', '\x148', '\a', '\x1B', '\x2', '\x2', '\x148', '\x149', 
		'\a', '\x1B', '\x2', '\x2', '\x149', '\x14A', '\x5', '@', '!', '\x2', 
		'\x14A', '#', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14C', '\a', '\x1C', 
		'\x2', '\x2', '\x14C', '\x14D', '\a', '\x1C', '\x2', '\x2', '\x14D', '\x14E', 
		'\x5', '@', '!', '\x2', '\x14E', '%', '\x3', '\x2', '\x2', '\x2', '\x14F', 
		'\x150', '\a', '\x30', '\x2', '\x2', '\x150', '\x151', '\x5', '\n', '\x6', 
		'\x2', '\x151', '\'', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', '\a', 
		'\a', '\x2', '\x2', '\x153', '\x154', '\a', '$', '\x2', '\x2', '\x154', 
		'\x15F', '\a', '%', '\x2', '\x2', '\x155', '\x156', '\a', '\b', '\x2', 
		'\x2', '\x156', '\x157', '\a', '$', '\x2', '\x2', '\x157', '\x15F', '\a', 
		'%', '\x2', '\x2', '\x158', '\x159', '\a', '\t', '\x2', '\x2', '\x159', 
		'\x15A', '\a', '$', '\x2', '\x2', '\x15A', '\x15F', '\a', '%', '\x2', 
		'\x2', '\x15B', '\x15C', '\a', '\v', '\x2', '\x2', '\x15C', '\x15D', '\a', 
		'$', '\x2', '\x2', '\x15D', '\x15F', '\a', '%', '\x2', '\x2', '\x15E', 
		'\x152', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x15E', '\x158', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15B', 
		'\x3', '\x2', '\x2', '\x2', '\x15F', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x160', '\x161', '\a', '\a', '\x2', '\x2', '\x161', '\x162', '\a', '$', 
		'\x2', '\x2', '\x162', '\x163', '\x5', '\n', '\x6', '\x2', '\x163', '\x164', 
		'\a', '%', '\x2', '\x2', '\x164', '\x175', '\x3', '\x2', '\x2', '\x2', 
		'\x165', '\x166', '\a', '\b', '\x2', '\x2', '\x166', '\x167', '\a', '$', 
		'\x2', '\x2', '\x167', '\x168', '\x5', '\n', '\x6', '\x2', '\x168', '\x169', 
		'\a', '%', '\x2', '\x2', '\x169', '\x175', '\x3', '\x2', '\x2', '\x2', 
		'\x16A', '\x16B', '\a', '\t', '\x2', '\x2', '\x16B', '\x16C', '\a', '$', 
		'\x2', '\x2', '\x16C', '\x16D', '\x5', '\n', '\x6', '\x2', '\x16D', '\x16E', 
		'\a', '%', '\x2', '\x2', '\x16E', '\x175', '\x3', '\x2', '\x2', '\x2', 
		'\x16F', '\x170', '\a', '\v', '\x2', '\x2', '\x170', '\x171', '\a', '$', 
		'\x2', '\x2', '\x171', '\x172', '\x5', '\n', '\x6', '\x2', '\x172', '\x173', 
		'\a', '%', '\x2', '\x2', '\x173', '\x175', '\x3', '\x2', '\x2', '\x2', 
		'\x174', '\x160', '\x3', '\x2', '\x2', '\x2', '\x174', '\x165', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x174', 
		'\x16F', '\x3', '\x2', '\x2', '\x2', '\x175', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x176', '\x177', '\a', '\x12', '\x2', '\x2', '\x177', '\x17B', 
		'\x5', '*', '\x16', '\x2', '\x178', '\x179', '\a', '\x12', '\x2', '\x2', 
		'\x179', '\x17B', '\x5', '\x38', '\x1D', '\x2', '\x17A', '\x176', '\x3', 
		'\x2', '\x2', '\x2', '\x17A', '\x178', '\x3', '\x2', '\x2', '\x2', '\x17B', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17D', '\x5', '\x14', '\v', 
		'\x2', '\x17D', '\x17E', '\a', '$', '\x2', '\x2', '\x17E', '\x17F', '\x5', 
		'\n', '\x6', '\x2', '\x17F', '\x180', '\a', '%', '\x2', '\x2', '\x180', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x181', '\x182', '\a', '\x13', '\x2', 
		'\x2', '\x182', '\x183', '\x5', '@', '!', '\x2', '\x183', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x184', '\x185', '\a', '\x18', '\x2', '\x2', '\x185', 
		'\x186', '\a', '.', '\x2', '\x2', '\x186', '\x187', '\x5', '\x1C', '\xF', 
		'\x2', '\x187', '\x188', '\a', '&', '\x2', '\x2', '\x188', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x189', '\x18A', '\a', '\x15', '\x2', '\x2', '\x18A', 
		'\x18B', '\a', '\x18', '\x2', '\x2', '\x18B', '\x18D', '\a', '\"', '\x2', 
		'\x2', '\x18C', '\x18E', '\x5', '\x32', '\x1A', '\x2', '\x18D', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x18F', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x190', '\x3', 
		'\x2', '\x2', '\x2', '\x190', '\x191', '\x3', '\x2', '\x2', '\x2', '\x191', 
		'\x192', '\a', '#', '\x2', '\x2', '\x192', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x193', '\x194', '\a', '\x18', '\x2', '\x2', '\x194', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x195', '\x196', '\x5', '\x36', '\x1C', '\x2', 
		'\x196', '\x197', '\a', '\x1F', '\x2', '\x2', '\x197', '\x198', '\a', 
		' ', '\x2', '\x2', '\x198', '\x39', '\x3', '\x2', '\x2', '\x2', '\x199', 
		'\x19A', '\x5', '\x14', '\v', '\x2', '\x19A', '\x19B', '\a', '\x1E', '\x2', 
		'\x2', '\x19B', '\x19C', '\x5', '@', '!', '\x2', '\x19C', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x19D', '\x19E', '\a', '\x16', '\x2', '\x2', '\x19E', 
		'\x19F', '\a', '\x18', '\x2', '\x2', '\x19F', '\x1A0', '\a', '&', '\x2', 
		'\x2', '\x1A0', '=', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A2', '\a', 
		'\x18', '\x2', '\x2', '\x1A2', '\x1AF', '\a', '\x1F', '\x2', '\x2', '\x1A3', 
		'\x1A4', '\a', '\x18', '\x2', '\x2', '\x1A4', '\x1A5', '\a', '.', '\x2', 
		'\x2', '\x1A5', '\x1AC', '\x5', '\x1C', '\xF', '\x2', '\x1A6', '\x1A7', 
		'\a', '/', '\x2', '\x2', '\x1A7', '\x1A8', '\a', '\x18', '\x2', '\x2', 
		'\x1A8', '\x1A9', '\a', '.', '\x2', '\x2', '\x1A9', '\x1AB', '\x5', '\x1C', 
		'\xF', '\x2', '\x1AA', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AE', 
		'\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AA', '\x3', '\x2', '\x2', '\x2', 
		'\x1AC', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1B0', '\x3', 
		'\x2', '\x2', '\x2', '\x1AE', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AF', 
		'\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B0', '\x3', '\x2', '\x2', 
		'\x2', '\x1B0', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B2', 
		'\a', ' ', '\x2', '\x2', '\x1B2', '\x1B3', '\a', '.', '\x2', '\x2', '\x1B3', 
		'\x1B4', '\x5', '\x1C', '\xF', '\x2', '\x1B4', '\x1B5', '\a', '&', '\x2', 
		'\x2', '\x1B5', '?', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1BA', '\x5', 
		'\x14', '\v', '\x2', '\x1B7', '\x1BA', '\x5', '.', '\x18', '\x2', '\x1B8', 
		'\x1BA', '\x5', ':', '\x1E', '\x2', '\x1B9', '\x1B6', '\x3', '\x2', '\x2', 
		'\x2', '\x1B9', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1B8', 
		'\x3', '\x2', '\x2', '\x2', '\x1BA', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x1BB', '\x1BC', '\a', '\x17', '\x2', '\x2', '\x1BC', '\x1BD', '\a', 
		'\x18', '\x2', '\x2', '\x1BD', '\x1BE', '\a', '.', '\x2', '\x2', '\x1BE', 
		'\x1BF', '\x5', '\x1C', '\xF', '\x2', '\x1BF', '\x1C4', '\a', '\'', '\x2', 
		'\x2', '\x1C0', '\x1C5', '\a', '\x5', '\x2', '\x2', '\x1C1', '\x1C5', 
		'\x5', '\x16', '\f', '\x2', '\x1C2', '\x1C5', '\x5', '\x18', '\r', '\x2', 
		'\x1C3', '\x1C5', '\x5', ',', '\x17', '\x2', '\x1C4', '\x1C0', '\x3', 
		'\x2', '\x2', '\x2', '\x1C4', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C4', 
		'\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C3', '\x3', '\x2', '\x2', 
		'\x2', '\x1C5', '\x43', '\x3', '\x2', '\x2', '\x2', '&', 'J', 'P', 'V', 
		'X', '[', '_', '\x65', 'm', '{', '\x81', '\x90', '\x92', '\x99', '\xA6', 
		'\xC9', '\xD3', '\xDD', '\xEB', '\xFA', '\x103', '\x106', '\x115', '\x118', 
		'\x122', '\x126', '\x129', '\x131', '\x13D', '\x15E', '\x174', '\x17A', 
		'\x18F', '\x1AC', '\x1AF', '\x1B9', '\x1C4',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace LL
