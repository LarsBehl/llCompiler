//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ll.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ll {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class llParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOUBLE_LITERAL=1, INTEGER_LITERAL=2, RETURN=3, INT_TYPE=4, DOUBLE_TYPE=5, 
		BOOL_TYPE=6, WORD=7, MULT=8, ADD=9, MINUS=10, DIV=11, DOT=12, BRAC_L=13, 
		BRAC_R=14, ASSIGN=15, CURL_L=16, CURL_R=17, SEMCOL=18, EQUAL=19, LESS=20, 
		GREATER=21, COLON=22, WHITESPACE=23;
	public const int
		RULE_compileUnit = 0, RULE_compositUnit = 1, RULE_expression = 2, RULE_statement = 3, 
		RULE_numericExpression = 4, RULE_expressionSequenz = 5, RULE_typeDefinition = 6, 
		RULE_returnExpression = 7;
	public static readonly string[] ruleNames = {
		"compileUnit", "compositUnit", "expression", "statement", "numericExpression", 
		"expressionSequenz", "typeDefinition", "returnExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'*'", "'+'", "'-'", "'/'", 
		"'.'", "'('", "')'", "'='", "'{'", "'}'", "';'", null, "'<'", "'>'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOUBLE_LITERAL", "INTEGER_LITERAL", "RETURN", "INT_TYPE", "DOUBLE_TYPE", 
		"BOOL_TYPE", "WORD", "MULT", "ADD", "MINUS", "DIV", "DOT", "BRAC_L", "BRAC_R", 
		"ASSIGN", "CURL_L", "CURL_R", "SEMCOL", "EQUAL", "LESS", "GREATER", "COLON", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ll.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static llParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public llParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public llParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public CompositUnitContext compositUnit() {
			return GetRuleContext<CompositUnitContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(llParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16; compositUnit();
			State = 17; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositUnitContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CompositUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositUnit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositUnitContext compositUnit() {
		CompositUnitContext _localctx = new CompositUnitContext(Context, State);
		EnterRule(_localctx, 2, RULE_compositUnit);
		try {
			State = 21;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 19; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 20; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LessOperatorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LESS() { return GetToken(llParser.LESS, 0); }
		public LessOperatorContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinOpAddSubContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(llParser.ADD, 0); }
		public ITerminalNode MINUS() { return GetToken(llParser.MINUS, 0); }
		public BinOpAddSubContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinOpAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinOpMultDivContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(llParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(llParser.DIV, 0); }
		public BinOpMultDivContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinOpMultDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprSequContext : ExpressionContext {
		public ExpressionSequenzContext expressionSequenz() {
			return GetRuleContext<ExpressionSequenzContext>(0);
		}
		public ExprSequContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprSequ(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericAtomExpressionContext : ExpressionContext {
		public NumericExpressionContext numericExpression() {
			return GetRuleContext<NumericExpressionContext>(0);
		}
		public NumericAtomExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericAtomExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesContext : ExpressionContext {
		public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public ParenthesContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterOperatorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode GREATER() { return GetToken(llParser.GREATER, 0); }
		public GreaterOperatorContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityOpertorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQUAL() { return GetToken(llParser.EQUAL, 0); }
		public EqualityOpertorContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityOpertor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExpressionContext : ExpressionContext {
		public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public VariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BRAC_L:
				{
				_localctx = new ParenthesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 24; Match(BRAC_L);
				State = 25; expression(0);
				State = 26; Match(BRAC_R);
				}
				break;
			case DOUBLE_LITERAL:
			case INTEGER_LITERAL:
			case ADD:
			case MINUS:
				{
				_localctx = new NumericAtomExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 28; numericExpression();
				}
				break;
			case WORD:
				{
				_localctx = new VariableExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 29; Match(WORD);
				}
				break;
			case CURL_L:
				{
				_localctx = new ExprSequContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 30; expressionSequenz();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 50;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 48;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new BinOpMultDivContext(new ExpressionContext(_parentctx, _parentState));
						((BinOpMultDivContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 33;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 34;
						((BinOpMultDivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MULT || _la==DIV) ) {
							((BinOpMultDivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 35; ((BinOpMultDivContext)_localctx).right = expression(9);
						}
						break;
					case 2:
						{
						_localctx = new BinOpAddSubContext(new ExpressionContext(_parentctx, _parentState));
						((BinOpAddSubContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 36;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 37;
						((BinOpAddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==MINUS) ) {
							((BinOpAddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 38; ((BinOpAddSubContext)_localctx).right = expression(8);
						}
						break;
					case 3:
						{
						_localctx = new EqualityOpertorContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityOpertorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 39;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 40; ((EqualityOpertorContext)_localctx).op = Match(EQUAL);
						State = 41; ((EqualityOpertorContext)_localctx).right = expression(7);
						}
						break;
					case 4:
						{
						_localctx = new LessOperatorContext(new ExpressionContext(_parentctx, _parentState));
						((LessOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 42;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 43; ((LessOperatorContext)_localctx).op = Match(LESS);
						State = 44; ((LessOperatorContext)_localctx).right = expression(6);
						}
						break;
					case 5:
						{
						_localctx = new GreaterOperatorContext(new ExpressionContext(_parentctx, _parentState));
						((GreaterOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 45;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 46; ((GreaterOperatorContext)_localctx).op = Match(GREATER);
						State = 47; ((GreaterOperatorContext)_localctx).right = expression(5);
						}
						break;
					}
					} 
				}
				State = 52;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InitializationStatementContext : StatementContext {
		public IToken left;
		public TypeDefinitionContext type;
		public ExpressionContext right;
		public ITerminalNode COLON() { return GetToken(llParser.COLON, 0); }
		public ITerminalNode ASSIGN() { return GetToken(llParser.ASSIGN, 0); }
		public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializationStatementContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStatementContext : StatementContext {
		public IToken left;
		public ExpressionContext right;
		public ITerminalNode ASSIGN() { return GetToken(llParser.ASSIGN, 0); }
		public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignStatementContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new AssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 53; ((AssignStatementContext)_localctx).left = Match(WORD);
				State = 54; Match(ASSIGN);
				State = 55; ((AssignStatementContext)_localctx).right = expression(0);
				State = 56; Match(SEMCOL);
				}
				break;
			case 2:
				_localctx = new InitializationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 58; ((InitializationStatementContext)_localctx).left = Match(WORD);
				State = 59; Match(COLON);
				State = 60; ((InitializationStatementContext)_localctx).type = typeDefinition();
				State = 61; Match(ASSIGN);
				State = 62; ((InitializationStatementContext)_localctx).right = expression(0);
				State = 63; Match(SEMCOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericExpressionContext : ParserRuleContext {
		public NumericExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericExpression; } }
	 
		public NumericExpressionContext() { }
		public virtual void CopyFrom(NumericExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntegerAtomExpressionContext : NumericExpressionContext {
		public IToken sign;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(llParser.INTEGER_LITERAL, 0); }
		public ITerminalNode MINUS() { return GetToken(llParser.MINUS, 0); }
		public ITerminalNode ADD() { return GetToken(llParser.ADD, 0); }
		public IntegerAtomExpressionContext(NumericExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerAtomExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleAtomExpressionContext : NumericExpressionContext {
		public IToken sign;
		public ITerminalNode DOUBLE_LITERAL() { return GetToken(llParser.DOUBLE_LITERAL, 0); }
		public ITerminalNode MINUS() { return GetToken(llParser.MINUS, 0); }
		public ITerminalNode ADD() { return GetToken(llParser.ADD, 0); }
		public DoubleAtomExpressionContext(NumericExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleAtomExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericExpressionContext numericExpression() {
		NumericExpressionContext _localctx = new NumericExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_numericExpression);
		int _la;
		try {
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new DoubleAtomExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADD || _la==MINUS) {
					{
					State = 67;
					((DoubleAtomExpressionContext)_localctx).sign = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ADD || _la==MINUS) ) {
						((DoubleAtomExpressionContext)_localctx).sign = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 70; Match(DOUBLE_LITERAL);
				}
				break;
			case 2:
				_localctx = new IntegerAtomExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADD || _la==MINUS) {
					{
					State = 71;
					((IntegerAtomExpressionContext)_localctx).sign = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ADD || _la==MINUS) ) {
						((IntegerAtomExpressionContext)_localctx).sign = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 74; Match(INTEGER_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenzContext : ParserRuleContext {
		public ITerminalNode CURL_L() { return GetToken(llParser.CURL_L, 0); }
		public ReturnExpressionContext returnExpression() {
			return GetRuleContext<ReturnExpressionContext>(0);
		}
		public ITerminalNode CURL_R() { return GetToken(llParser.CURL_R, 0); }
		public CompositUnitContext[] compositUnit() {
			return GetRuleContexts<CompositUnitContext>();
		}
		public CompositUnitContext compositUnit(int i) {
			return GetRuleContext<CompositUnitContext>(i);
		}
		public ExpressionSequenzContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequenz; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSequenz(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenzContext expressionSequenz() {
		ExpressionSequenzContext _localctx = new ExpressionSequenzContext(Context, State);
		EnterRule(_localctx, 10, RULE_expressionSequenz);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(CURL_L);
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE_LITERAL) | (1L << INTEGER_LITERAL) | (1L << WORD) | (1L << ADD) | (1L << MINUS) | (1L << BRAC_L) | (1L << CURL_L))) != 0)) {
				{
				{
				State = 78; compositUnit();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 84; returnExpression();
			State = 85; Match(CURL_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefinitionContext : ParserRuleContext {
		public ITerminalNode INT_TYPE() { return GetToken(llParser.INT_TYPE, 0); }
		public ITerminalNode DOUBLE_TYPE() { return GetToken(llParser.DOUBLE_TYPE, 0); }
		public ITerminalNode BOOL_TYPE() { return GetToken(llParser.BOOL_TYPE, 0); }
		public TypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefinition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefinitionContext typeDefinition() {
		TypeDefinitionContext _localctx = new TypeDefinitionContext(Context, State);
		EnterRule(_localctx, 12, RULE_typeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_TYPE) | (1L << DOUBLE_TYPE) | (1L << BOOL_TYPE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnExpressionContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(llParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public ReturnExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnExpressionContext returnExpression() {
		ReturnExpressionContext _localctx = new ReturnExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_returnExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(RETURN);
			State = 90; expression(0);
			State = 91; Match(SEMCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x19', '`', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x18', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\"', '\n', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x33', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x36', '\v', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\x44', '\n', '\x5', '\x3', '\x6', '\x5', 
		'\x6', 'G', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'K', 
		'\n', '\x6', '\x3', '\x6', '\x5', '\x6', 'N', '\n', '\x6', '\x3', '\a', 
		'\x3', '\a', '\a', '\a', 'R', '\n', '\a', '\f', '\a', '\xE', '\a', 'U', 
		'\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x2', '\x3', '\x6', '\n', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x2', '\x5', '\x4', '\x2', '\n', '\n', '\r', '\r', '\x3', '\x2', 
		'\v', '\f', '\x3', '\x2', '\x6', '\b', '\x2', '\x65', '\x2', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x17', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'!', '\x3', '\x2', '\x2', '\x2', '\b', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'M', '\x3', '\x2', '\x2', '\x2', '\f', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'Y', '\x3', '\x2', '\x2', '\x2', '\x10', '[', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x13', '\x5', '\x4', '\x3', '\x2', '\x13', '\x14', 
		'\a', '\x2', '\x2', '\x3', '\x14', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '\x18', '\x5', '\b', '\x5', '\x2', '\x16', '\x18', '\x5', '\x6', 
		'\x4', '\x2', '\x17', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x1A', '\b', '\x4', '\x1', '\x2', '\x1A', '\x1B', '\a', '\xF', 
		'\x2', '\x2', '\x1B', '\x1C', '\x5', '\x6', '\x4', '\x2', '\x1C', '\x1D', 
		'\a', '\x10', '\x2', '\x2', '\x1D', '\"', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\"', '\x5', '\n', '\x6', '\x2', '\x1F', '\"', '\a', '\t', '\x2', 
		'\x2', ' ', '\"', '\x5', '\f', '\a', '\x2', '!', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '!', '\x1E', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '!', ' ', '\x3', '\x2', '\x2', '\x2', '\"', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '#', '$', '\f', '\n', '\x2', '\x2', '$', '%', 
		'\t', '\x2', '\x2', '\x2', '%', '\x33', '\x5', '\x6', '\x4', '\v', '&', 
		'\'', '\f', '\t', '\x2', '\x2', '\'', '(', '\t', '\x3', '\x2', '\x2', 
		'(', '\x33', '\x5', '\x6', '\x4', '\n', ')', '*', '\f', '\b', '\x2', '\x2', 
		'*', '+', '\a', '\x15', '\x2', '\x2', '+', '\x33', '\x5', '\x6', '\x4', 
		'\t', ',', '-', '\f', '\a', '\x2', '\x2', '-', '.', '\a', '\x16', '\x2', 
		'\x2', '.', '\x33', '\x5', '\x6', '\x4', '\b', '/', '\x30', '\f', '\x6', 
		'\x2', '\x2', '\x30', '\x31', '\a', '\x17', '\x2', '\x2', '\x31', '\x33', 
		'\x5', '\x6', '\x4', '\a', '\x32', '#', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'&', '\x3', '\x2', '\x2', '\x2', '\x32', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x32', ',', '\x3', '\x2', '\x2', '\x2', '\x32', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x36', '\x3', '\x2', '\x2', '\x2', '\x34', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x38', '\a', '\t', '\x2', '\x2', '\x38', '\x39', '\a', 
		'\x11', '\x2', '\x2', '\x39', ':', '\x5', '\x6', '\x4', '\x2', ':', ';', 
		'\a', '\x14', '\x2', '\x2', ';', '\x44', '\x3', '\x2', '\x2', '\x2', '<', 
		'=', '\a', '\t', '\x2', '\x2', '=', '>', '\a', '\x18', '\x2', '\x2', '>', 
		'?', '\x5', '\xE', '\b', '\x2', '?', '@', '\a', '\x11', '\x2', '\x2', 
		'@', '\x41', '\x5', '\x6', '\x4', '\x2', '\x41', '\x42', '\a', '\x14', 
		'\x2', '\x2', '\x42', '\x44', '\x3', '\x2', '\x2', '\x2', '\x43', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '<', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x45', 'G', '\t', '\x3', '\x2', '\x2', 
		'\x46', '\x45', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', 'N', '\a', '\x3', 
		'\x2', '\x2', 'I', 'K', '\t', '\x3', '\x2', '\x2', 'J', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'N', '\a', '\x4', '\x2', '\x2', 'M', '\x46', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'J', '\x3', '\x2', '\x2', '\x2', 'N', '\v', 
		'\x3', '\x2', '\x2', '\x2', 'O', 'S', '\a', '\x12', '\x2', '\x2', 'P', 
		'R', '\x5', '\x4', '\x3', '\x2', 'Q', 'P', '\x3', '\x2', '\x2', '\x2', 
		'R', 'U', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\x3', '\x2', '\x2', '\x2', 
		'U', 'S', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x5', '\x10', '\t', '\x2', 
		'W', 'X', '\a', '\x13', '\x2', '\x2', 'X', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\t', '\x4', '\x2', '\x2', 'Z', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '[', '\\', '\a', '\x5', '\x2', '\x2', '\\', ']', '\x5', 
		'\x6', '\x4', '\x2', ']', '^', '\a', '\x14', '\x2', '\x2', '^', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\v', '\x17', '!', '\x32', '\x34', '\x43', 
		'\x46', 'J', 'M', 'S',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ll
