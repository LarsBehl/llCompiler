//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ll.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LL {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class llParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOUBLE_LITERAL=1, INTEGER_LITERAL=2, CHAR_LITERAL=3, RETURN=4, INT_TYPE=5, 
		DOUBLE_TYPE=6, BOOL_TYPE=7, VOID_TYPE=8, CHAR_TYPE=9, BOOL_TRUE=10, BOOL_FALSE=11, 
		IF=12, ELSE=13, WHILE=14, PRINT=15, NEW=16, DESTROY=17, NULL=18, STRUCT=19, 
		LOAD=20, WORD=21, MOD=22, MULT=23, PLUS=24, MINUS=25, DIV=26, DOT=27, 
		PAR_L=28, PAR_R=29, ASSIGN=30, CURL_L=31, CURL_R=32, BRAC_L=33, BRAC_R=34, 
		SEMCOL=35, EQUAL=36, ADD_ASSIGN=37, SUB_ASSIGN=38, MULT_ASSIGN=39, DIV_ASSIGN=40, 
		LESS=41, GREATER=42, COLON=43, COMMA=44, NOT=45, AND=46, OR=47, NOT_EQUAL=48, 
		APOSTROPHE=49, WHITESPACE=50;
	public const int
		RULE_compileUnit = 0, RULE_program = 1, RULE_compositUnit = 2, RULE_line = 3, 
		RULE_expression = 4, RULE_statement = 5, RULE_unaryExpression = 6, RULE_functionCall = 7, 
		RULE_functionDefinition = 8, RULE_variableExpression = 9, RULE_numericExpression = 10, 
		RULE_boolExpression = 11, RULE_blockStatement = 12, RULE_typeDefinition = 13, 
		RULE_incrementPostExpression = 14, RULE_decrementPostExpression = 15, 
		RULE_incrementPreExpression = 16, RULE_decrementPreExpression = 17, RULE_notExpression = 18, 
		RULE_arrayTypes = 19, RULE_arrayCreation = 20, RULE_refTypeCreation = 21, 
		RULE_arrayIndexing = 22, RULE_refTypeDestruction = 23, RULE_structProperties = 24, 
		RULE_structDefinition = 25, RULE_structName = 26, RULE_structCreation = 27, 
		RULE_structPropertyAccess = 28, RULE_loadStatement = 29, RULE_functionPrototype = 30, 
		RULE_valueAccess = 31;
	public static readonly string[] ruleNames = {
		"compileUnit", "program", "compositUnit", "line", "expression", "statement", 
		"unaryExpression", "functionCall", "functionDefinition", "variableExpression", 
		"numericExpression", "boolExpression", "blockStatement", "typeDefinition", 
		"incrementPostExpression", "decrementPostExpression", "incrementPreExpression", 
		"decrementPreExpression", "notExpression", "arrayTypes", "arrayCreation", 
		"refTypeCreation", "arrayIndexing", "refTypeDestruction", "structProperties", 
		"structDefinition", "structName", "structCreation", "structPropertyAccess", 
		"loadStatement", "functionPrototype", "valueAccess"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "'%'", "'*'", 
		"'+'", "'-'", "'/'", "'.'", "'('", "')'", "'='", "'{'", "'}'", "'['", 
		"']'", "';'", null, null, null, null, null, "'<'", "'>'", "':'", "','", 
		"'!'", null, null, null, "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOUBLE_LITERAL", "INTEGER_LITERAL", "CHAR_LITERAL", "RETURN", "INT_TYPE", 
		"DOUBLE_TYPE", "BOOL_TYPE", "VOID_TYPE", "CHAR_TYPE", "BOOL_TRUE", "BOOL_FALSE", 
		"IF", "ELSE", "WHILE", "PRINT", "NEW", "DESTROY", "NULL", "STRUCT", "LOAD", 
		"WORD", "MOD", "MULT", "PLUS", "MINUS", "DIV", "DOT", "PAR_L", "PAR_R", 
		"ASSIGN", "CURL_L", "CURL_R", "BRAC_L", "BRAC_R", "SEMCOL", "EQUAL", "ADD_ASSIGN", 
		"SUB_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "LESS", "GREATER", "COLON", 
		"COMMA", "NOT", "AND", "OR", "NOT_EQUAL", "APOSTROPHE", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ll.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static llParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public llParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public llParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompileUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(llParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			program();
			State = 65;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoadStatementContext[] loadStatement() {
			return GetRuleContexts<LoadStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadStatementContext loadStatement(int i) {
			return GetRuleContext<LoadStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext[] functionDefinition() {
			return GetRuleContexts<FunctionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition(int i) {
			return GetRuleContext<FunctionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext[] structDefinition() {
			return GetRuleContexts<StructDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext structDefinition(int i) {
			return GetRuleContext<StructDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionPrototypeContext[] functionPrototype() {
			return GetRuleContexts<FunctionPrototypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionPrototypeContext functionPrototype(int i) {
			return GetRuleContext<FunctionPrototypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompositUnitContext compositUnit() {
			return GetRuleContext<CompositUnitContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 2, RULE_program);
		int _la;
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LOAD) {
					{
					{
					State = 67;
					loadStatement();
					}
					}
					State = 72;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 76;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 73;
						functionDefinition();
						}
						break;
					case 2:
						{
						State = 74;
						structDefinition();
						}
						break;
					case 3:
						{
						State = 75;
						functionPrototype();
						}
						break;
					}
					}
					State = 78;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==STRUCT || _la==WORD );
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80;
				compositUnit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CompositUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositUnitContext compositUnit() {
		CompositUnitContext _localctx = new CompositUnitContext(Context, State);
		EnterRule(_localctx, 4, RULE_compositUnit);
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 6, RULE_line);
		try {
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				expression(0);
				State = 89;
				Match(SEMCOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LessOperatorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(llParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(llParser.ASSIGN, 0); }
		public LessOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrOperatorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(llParser.OR, 0); }
		public OrOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinOpAddSubContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(llParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(llParser.MINUS, 0); }
		public BinOpAddSubContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinOpAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotEqualOperatorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(llParser.NOT_EQUAL, 0); }
		public NotEqualOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotEqualOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public UnaryExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinOpMultDivContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(llParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(llParser.DIV, 0); }
		public BinOpMultDivContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinOpMultDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinOpModContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(llParser.MOD, 0); }
		public BinOpModContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinOpMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		public ParenthesContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterOperatorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(llParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(llParser.ASSIGN, 0); }
		public GreaterOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityOpertorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(llParser.EQUAL, 0); }
		public EqualityOpertorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityOpertor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndOperatorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(llParser.AND, 0); }
		public AndOperatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PAR_L:
				{
				_localctx = new ParenthesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 94;
				Match(PAR_L);
				State = 95;
				expression(0);
				State = 96;
				Match(PAR_R);
				}
				break;
			case DOUBLE_LITERAL:
			case INTEGER_LITERAL:
			case CHAR_LITERAL:
			case BOOL_TRUE:
			case BOOL_FALSE:
			case NULL:
			case WORD:
			case PLUS:
			case MINUS:
			case NOT:
				{
				_localctx = new UnaryExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 98;
				unaryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 136;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 134;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						_localctx = new BinOpModContext(new ExpressionContext(_parentctx, _parentState));
						((BinOpModContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 101;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 102;
						((BinOpModContext)_localctx).op = Match(MOD);
						State = 103;
						((BinOpModContext)_localctx).right = expression(11);
						}
						break;
					case 2:
						{
						_localctx = new BinOpMultDivContext(new ExpressionContext(_parentctx, _parentState));
						((BinOpMultDivContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 104;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 105;
						((BinOpMultDivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MULT || _la==DIV) ) {
							((BinOpMultDivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 106;
						((BinOpMultDivContext)_localctx).right = expression(10);
						}
						break;
					case 3:
						{
						_localctx = new BinOpAddSubContext(new ExpressionContext(_parentctx, _parentState));
						((BinOpAddSubContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 107;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 108;
						((BinOpAddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((BinOpAddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 109;
						((BinOpAddSubContext)_localctx).right = expression(9);
						}
						break;
					case 4:
						{
						_localctx = new LessOperatorContext(new ExpressionContext(_parentctx, _parentState));
						((LessOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 110;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 111;
						((LessOperatorContext)_localctx).op = Match(LESS);
						State = 113;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ASSIGN) {
							{
							State = 112;
							Match(ASSIGN);
							}
						}

						State = 115;
						((LessOperatorContext)_localctx).right = expression(8);
						}
						break;
					case 5:
						{
						_localctx = new GreaterOperatorContext(new ExpressionContext(_parentctx, _parentState));
						((GreaterOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 116;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 117;
						((GreaterOperatorContext)_localctx).op = Match(GREATER);
						State = 119;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ASSIGN) {
							{
							State = 118;
							Match(ASSIGN);
							}
						}

						State = 121;
						((GreaterOperatorContext)_localctx).right = expression(7);
						}
						break;
					case 6:
						{
						_localctx = new EqualityOpertorContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityOpertorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 122;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 123;
						((EqualityOpertorContext)_localctx).op = Match(EQUAL);
						State = 124;
						((EqualityOpertorContext)_localctx).right = expression(6);
						}
						break;
					case 7:
						{
						_localctx = new NotEqualOperatorContext(new ExpressionContext(_parentctx, _parentState));
						((NotEqualOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 125;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 126;
						((NotEqualOperatorContext)_localctx).op = Match(NOT_EQUAL);
						State = 127;
						((NotEqualOperatorContext)_localctx).right = expression(5);
						}
						break;
					case 8:
						{
						_localctx = new AndOperatorContext(new ExpressionContext(_parentctx, _parentState));
						((AndOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 128;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 129;
						((AndOperatorContext)_localctx).op = Match(AND);
						State = 130;
						((AndOperatorContext)_localctx).right = expression(4);
						}
						break;
					case 9:
						{
						_localctx = new OrOperatorContext(new ExpressionContext(_parentctx, _parentState));
						((OrOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 131;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 132;
						((OrOperatorContext)_localctx).op = Match(OR);
						State = 133;
						((OrOperatorContext)_localctx).right = expression(3);
						}
						break;
					}
					} 
				}
				State = 138;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignArrayFieldContext : StatementContext {
		public ArrayIndexingContext left;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(llParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexingContext arrayIndexing() {
			return GetRuleContext<ArrayIndexingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignArrayFieldContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignArrayField(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(llParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefTypeCreationContext refTypeCreation() {
			return GetRuleContext<RefTypeCreationContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public CompositUnitContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(llParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompositUnitContext compositUnit() {
			return GetRuleContext<CompositUnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(llParser.ELSE, 0); }
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubAssignStatementContext : StatementContext {
		public IToken left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_ASSIGN() { return GetToken(llParser.SUB_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubAssignStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		public CompositUnitContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(llParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompositUnitContext compositUnit() {
			return GetRuleContext<CompositUnitContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(llParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public PrintStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InitializationStatementContext : StatementContext {
		public IToken left;
		public TypeDefinitionContext type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(llParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(llParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefTypeCreationContext refTypeCreation() {
			return GetRuleContext<RefTypeCreationContext>(0);
		}
		public InitializationStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DestructionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public RefTypeDestructionContext refTypeDestruction() {
			return GetRuleContext<RefTypeDestructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public DestructionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultAssignStatementContext : StatementContext {
		public IToken left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_ASSIGN() { return GetToken(llParser.MULT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MultAssignStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddAssignStatementContext : StatementContext {
		public IToken left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_ASSIGN() { return GetToken(llParser.ADD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AddAssignStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStatementContext : StatementContext {
		public IToken left;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(llParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefTypeCreationContext refTypeCreation() {
			return GetRuleContext<RefTypeCreationContext>(0);
		}
		public AssignStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStructPropContext : StatementContext {
		public StructPropertyAccessContext left;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(llParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructPropertyAccessContext structPropertyAccess() {
			return GetRuleContext<StructPropertyAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefTypeCreationContext refTypeCreation() {
			return GetRuleContext<RefTypeCreationContext>(0);
		}
		public AssignStructPropContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStructProp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstantiationStatementContext : StatementContext {
		public IToken left;
		public TypeDefinitionContext type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(llParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		public InstantiationStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstantiationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivAssignStatementContext : StatementContext {
		public IToken left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN() { return GetToken(llParser.DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DivAssignStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_statement);
		int _la;
		try {
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new AssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 139;
				((AssignStatementContext)_localctx).left = Match(WORD);
				State = 140;
				Match(ASSIGN);
				State = 143;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOUBLE_LITERAL:
				case INTEGER_LITERAL:
				case CHAR_LITERAL:
				case BOOL_TRUE:
				case BOOL_FALSE:
				case NULL:
				case WORD:
				case PLUS:
				case MINUS:
				case PAR_L:
				case NOT:
					{
					State = 141;
					expression(0);
					}
					break;
				case NEW:
					{
					State = 142;
					refTypeCreation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 145;
				Match(SEMCOL);
				}
				break;
			case 2:
				_localctx = new AssignArrayFieldContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 147;
				((AssignArrayFieldContext)_localctx).left = arrayIndexing();
				State = 148;
				Match(ASSIGN);
				{
				State = 149;
				expression(0);
				}
				State = 150;
				Match(SEMCOL);
				}
				break;
			case 3:
				_localctx = new AssignStructPropContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 152;
				((AssignStructPropContext)_localctx).left = structPropertyAccess();
				State = 153;
				Match(ASSIGN);
				State = 156;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOUBLE_LITERAL:
				case INTEGER_LITERAL:
				case CHAR_LITERAL:
				case BOOL_TRUE:
				case BOOL_FALSE:
				case NULL:
				case WORD:
				case PLUS:
				case MINUS:
				case PAR_L:
				case NOT:
					{
					State = 154;
					expression(0);
					}
					break;
				case NEW:
					{
					State = 155;
					refTypeCreation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 158;
				Match(SEMCOL);
				}
				break;
			case 4:
				_localctx = new AddAssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 160;
				((AddAssignStatementContext)_localctx).left = Match(WORD);
				State = 161;
				Match(ADD_ASSIGN);
				State = 162;
				((AddAssignStatementContext)_localctx).right = expression(0);
				State = 163;
				Match(SEMCOL);
				}
				break;
			case 5:
				_localctx = new SubAssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 165;
				((SubAssignStatementContext)_localctx).left = Match(WORD);
				State = 166;
				Match(SUB_ASSIGN);
				State = 167;
				((SubAssignStatementContext)_localctx).right = expression(0);
				State = 168;
				Match(SEMCOL);
				}
				break;
			case 6:
				_localctx = new MultAssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 170;
				((MultAssignStatementContext)_localctx).left = Match(WORD);
				State = 171;
				Match(MULT_ASSIGN);
				State = 172;
				((MultAssignStatementContext)_localctx).right = expression(0);
				State = 173;
				Match(SEMCOL);
				}
				break;
			case 7:
				_localctx = new DivAssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 175;
				((DivAssignStatementContext)_localctx).left = Match(WORD);
				State = 176;
				Match(DIV_ASSIGN);
				State = 177;
				((DivAssignStatementContext)_localctx).right = expression(0);
				State = 178;
				Match(SEMCOL);
				}
				break;
			case 8:
				_localctx = new InstantiationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 180;
				((InstantiationStatementContext)_localctx).left = Match(WORD);
				State = 181;
				Match(COLON);
				State = 182;
				((InstantiationStatementContext)_localctx).type = typeDefinition();
				State = 183;
				Match(SEMCOL);
				}
				break;
			case 9:
				_localctx = new InitializationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 185;
				((InitializationStatementContext)_localctx).left = Match(WORD);
				State = 186;
				Match(COLON);
				State = 187;
				((InitializationStatementContext)_localctx).type = typeDefinition();
				State = 188;
				Match(ASSIGN);
				State = 191;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOUBLE_LITERAL:
				case INTEGER_LITERAL:
				case CHAR_LITERAL:
				case BOOL_TRUE:
				case BOOL_FALSE:
				case NULL:
				case WORD:
				case PLUS:
				case MINUS:
				case PAR_L:
				case NOT:
					{
					State = 189;
					expression(0);
					}
					break;
				case NEW:
					{
					State = 190;
					refTypeCreation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 193;
				Match(SEMCOL);
				}
				break;
			case 10:
				_localctx = new DestructionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 195;
				refTypeDestruction();
				State = 196;
				Match(SEMCOL);
				}
				break;
			case 11:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 198;
				Match(RETURN);
				State = 201;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOUBLE_LITERAL:
				case INTEGER_LITERAL:
				case CHAR_LITERAL:
				case BOOL_TRUE:
				case BOOL_FALSE:
				case NULL:
				case WORD:
				case PLUS:
				case MINUS:
				case PAR_L:
				case NOT:
					{
					State = 199;
					expression(0);
					}
					break;
				case NEW:
					{
					State = 200;
					refTypeCreation();
					}
					break;
				case SEMCOL:
					break;
				default:
					break;
				}
				State = 203;
				Match(SEMCOL);
				}
				break;
			case 12:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 204;
				Match(IF);
				State = 205;
				Match(PAR_L);
				State = 206;
				((IfStatementContext)_localctx).cond = compositUnit();
				State = 207;
				Match(PAR_R);
				State = 208;
				blockStatement();
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 209;
					Match(ELSE);
					State = 210;
					blockStatement();
					}
				}

				}
				break;
			case 13:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 213;
				Match(WHILE);
				State = 214;
				Match(PAR_L);
				State = 215;
				((WhileStatementContext)_localctx).cond = compositUnit();
				State = 216;
				Match(PAR_R);
				State = 217;
				blockStatement();
				}
				break;
			case 14:
				_localctx = new PrintStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 219;
				Match(PRINT);
				State = 220;
				Match(PAR_L);
				State = 221;
				expression(0);
				State = 222;
				Match(PAR_R);
				State = 223;
				Match(SEMCOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExpressionContext numericExpression() {
			return GetRuleContext<NumericExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(llParser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpressionContext variableExpression() {
			return GetRuleContext<VariableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncrementPostExpressionContext incrementPostExpression() {
			return GetRuleContext<IncrementPostExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecrementPostExpressionContext decrementPostExpression() {
			return GetRuleContext<DecrementPostExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecrementPreExpressionContext decrementPreExpression() {
			return GetRuleContext<DecrementPreExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncrementPreExpressionContext incrementPreExpression() {
			return GetRuleContext<IncrementPreExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexingContext arrayIndexing() {
			return GetRuleContext<ArrayIndexingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructPropertyAccessContext structPropertyAccess() {
			return GetRuleContext<StructPropertyAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(llParser.NULL, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_unaryExpression);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227;
				numericExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228;
				Match(CHAR_LITERAL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 229;
				boolExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 230;
				functionCall();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 231;
				variableExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 232;
				incrementPostExpression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 233;
				decrementPostExpression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 234;
				decrementPreExpression();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 235;
				incrementPreExpression();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 236;
				notExpression();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 237;
				arrayIndexing();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 238;
				structPropertyAccess();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 239;
				Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(llParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(llParser.COMMA, i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			_localctx.name = Match(WORD);
			State = 243;
			Match(PAR_L);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE_LITERAL) | (1L << INTEGER_LITERAL) | (1L << CHAR_LITERAL) | (1L << BOOL_TRUE) | (1L << BOOL_FALSE) | (1L << NULL) | (1L << WORD) | (1L << PLUS) | (1L << MINUS) | (1L << PAR_L) | (1L << NOT))) != 0)) {
				{
				State = 244;
				expression(0);
				State = 249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 245;
					Match(COMMA);
					State = 246;
					expression(0);
					}
					}
					State = 251;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 254;
			Match(PAR_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public IToken name;
		public BlockStatementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(llParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(llParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext[] typeDefinition() {
			return GetRuleContexts<TypeDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext typeDefinition(int i) {
			return GetRuleContext<TypeDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(llParser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(llParser.WORD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(llParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(llParser.COMMA, i);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			_localctx.name = Match(WORD);
			State = 257;
			Match(PAR_L);
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORD) {
				{
				State = 258;
				Match(WORD);
				State = 259;
				Match(COLON);
				State = 260;
				typeDefinition();
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 261;
					Match(COMMA);
					State = 262;
					Match(WORD);
					State = 263;
					Match(COLON);
					State = 264;
					typeDefinition();
					}
					}
					State = 269;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 272;
			Match(PAR_R);
			State = 273;
			Match(COLON);
			State = 274;
			typeDefinition();
			State = 275;
			_localctx.body = blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public VariableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableExpressionContext variableExpression() {
		VariableExpressionContext _localctx = new VariableExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericExpressionContext : ParserRuleContext {
		public NumericExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericExpression; } }
	 
		public NumericExpressionContext() { }
		public virtual void CopyFrom(NumericExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntegerAtomExpressionContext : NumericExpressionContext {
		public IToken sign;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(llParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(llParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(llParser.PLUS, 0); }
		public IntegerAtomExpressionContext(NumericExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerAtomExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleAtomExpressionContext : NumericExpressionContext {
		public IToken sign;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_LITERAL() { return GetToken(llParser.DOUBLE_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(llParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(llParser.PLUS, 0); }
		public DoubleAtomExpressionContext(NumericExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleAtomExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericExpressionContext numericExpression() {
		NumericExpressionContext _localctx = new NumericExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_numericExpression);
		int _la;
		try {
			State = 287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				_localctx = new DoubleAtomExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 279;
					((DoubleAtomExpressionContext)_localctx).sign = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
						((DoubleAtomExpressionContext)_localctx).sign = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 282;
				Match(DOUBLE_LITERAL);
				}
				break;
			case 2:
				_localctx = new IntegerAtomExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 283;
					((IntegerAtomExpressionContext)_localctx).sign = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
						((IntegerAtomExpressionContext)_localctx).sign = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 286;
				Match(INTEGER_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_TRUE() { return GetToken(llParser.BOOL_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_FALSE() { return GetToken(llParser.BOOL_FALSE, 0); }
		public BoolExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExpressionContext boolExpression() {
		BoolExpressionContext _localctx = new BoolExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_boolExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			_la = TokenStream.LA(1);
			if ( !(_la==BOOL_TRUE || _la==BOOL_FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURL_L() { return GetToken(llParser.CURL_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURL_R() { return GetToken(llParser.CURL_R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_blockStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(CURL_L);
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE_LITERAL) | (1L << INTEGER_LITERAL) | (1L << CHAR_LITERAL) | (1L << RETURN) | (1L << BOOL_TRUE) | (1L << BOOL_FALSE) | (1L << IF) | (1L << WHILE) | (1L << PRINT) | (1L << DESTROY) | (1L << NULL) | (1L << WORD) | (1L << PLUS) | (1L << MINUS) | (1L << PAR_L) | (1L << NOT))) != 0)) {
				{
				{
				State = 292;
				line();
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 298;
			Match(CURL_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_TYPE() { return GetToken(llParser.INT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_TYPE() { return GetToken(llParser.DOUBLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_TYPE() { return GetToken(llParser.BOOL_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID_TYPE() { return GetToken(llParser.VOID_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_TYPE() { return GetToken(llParser.CHAR_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypesContext arrayTypes() {
			return GetRuleContext<ArrayTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructNameContext structName() {
			return GetRuleContext<StructNameContext>(0);
		}
		public TypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefinitionContext typeDefinition() {
		TypeDefinitionContext _localctx = new TypeDefinitionContext(Context, State);
		EnterRule(_localctx, 26, RULE_typeDefinition);
		try {
			State = 307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300;
				Match(INT_TYPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301;
				Match(DOUBLE_TYPE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 302;
				Match(BOOL_TYPE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 303;
				Match(VOID_TYPE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 304;
				Match(CHAR_TYPE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 305;
				arrayTypes();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 306;
				structName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementPostExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(llParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(llParser.PLUS, i);
		}
		public IncrementPostExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incrementPostExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementPostExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementPostExpressionContext incrementPostExpression() {
		IncrementPostExpressionContext _localctx = new IncrementPostExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_incrementPostExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			valueAccess();
			State = 310;
			Match(PLUS);
			State = 311;
			Match(PLUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecrementPostExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(llParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(llParser.MINUS, i);
		}
		public DecrementPostExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decrementPostExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrementPostExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecrementPostExpressionContext decrementPostExpression() {
		DecrementPostExpressionContext _localctx = new DecrementPostExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_decrementPostExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			valueAccess();
			State = 314;
			Match(MINUS);
			State = 315;
			Match(MINUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementPreExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(llParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(llParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public IncrementPreExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incrementPreExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementPreExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementPreExpressionContext incrementPreExpression() {
		IncrementPreExpressionContext _localctx = new IncrementPreExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_incrementPreExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			Match(PLUS);
			State = 318;
			Match(PLUS);
			State = 319;
			valueAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecrementPreExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(llParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(llParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public DecrementPreExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decrementPreExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrementPreExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecrementPreExpressionContext decrementPreExpression() {
		DecrementPreExpressionContext _localctx = new DecrementPreExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_decrementPreExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			Match(MINUS);
			State = 322;
			Match(MINUS);
			State = 323;
			valueAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(llParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_notExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			Match(NOT);
			State = 326;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypesContext : ParserRuleContext {
		public ArrayTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTypes; } }
	 
		public ArrayTypesContext() { }
		public virtual void CopyFrom(ArrayTypesContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolArrayTypeContext : ArrayTypesContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_TYPE() { return GetToken(llParser.BOOL_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public BoolArrayTypeContext(ArrayTypesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntArrayTypeContext : ArrayTypesContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_TYPE() { return GetToken(llParser.INT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public IntArrayTypeContext(ArrayTypesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleArrayTypeContext : ArrayTypesContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_TYPE() { return GetToken(llParser.DOUBLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public DoubleArrayTypeContext(ArrayTypesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypesContext arrayTypes() {
		ArrayTypesContext _localctx = new ArrayTypesContext(Context, State);
		EnterRule(_localctx, 38, RULE_arrayTypes);
		try {
			State = 337;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_TYPE:
				_localctx = new IntArrayTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 328;
				Match(INT_TYPE);
				State = 329;
				Match(BRAC_L);
				State = 330;
				Match(BRAC_R);
				}
				break;
			case DOUBLE_TYPE:
				_localctx = new DoubleArrayTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 331;
				Match(DOUBLE_TYPE);
				State = 332;
				Match(BRAC_L);
				State = 333;
				Match(BRAC_R);
				}
				break;
			case BOOL_TYPE:
				_localctx = new BoolArrayTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 334;
				Match(BOOL_TYPE);
				State = 335;
				Match(BRAC_L);
				State = 336;
				Match(BRAC_R);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreationContext : ParserRuleContext {
		public ArrayCreationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreation; } }
	 
		public ArrayCreationContext() { }
		public virtual void CopyFrom(ArrayCreationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntArrayCreationContext : ArrayCreationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_TYPE() { return GetToken(llParser.INT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public IntArrayCreationContext(ArrayCreationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntArrayCreation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolArrayCreationContext : ArrayCreationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_TYPE() { return GetToken(llParser.BOOL_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public BoolArrayCreationContext(ArrayCreationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolArrayCreation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleArrayCreationContext : ArrayCreationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_TYPE() { return GetToken(llParser.DOUBLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public DoubleArrayCreationContext(ArrayCreationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleArrayCreation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreationContext arrayCreation() {
		ArrayCreationContext _localctx = new ArrayCreationContext(Context, State);
		EnterRule(_localctx, 40, RULE_arrayCreation);
		try {
			State = 354;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_TYPE:
				_localctx = new IntArrayCreationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 339;
				Match(INT_TYPE);
				State = 340;
				Match(BRAC_L);
				State = 341;
				expression(0);
				State = 342;
				Match(BRAC_R);
				}
				break;
			case DOUBLE_TYPE:
				_localctx = new DoubleArrayCreationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 344;
				Match(DOUBLE_TYPE);
				State = 345;
				Match(BRAC_L);
				State = 346;
				expression(0);
				State = 347;
				Match(BRAC_R);
				}
				break;
			case BOOL_TYPE:
				_localctx = new BoolArrayCreationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 349;
				Match(BOOL_TYPE);
				State = 350;
				Match(BRAC_L);
				State = 351;
				expression(0);
				State = 352;
				Match(BRAC_R);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefTypeCreationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(llParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayCreationContext arrayCreation() {
			return GetRuleContext<ArrayCreationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructCreationContext structCreation() {
			return GetRuleContext<StructCreationContext>(0);
		}
		public RefTypeCreationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refTypeCreation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefTypeCreation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefTypeCreationContext refTypeCreation() {
		RefTypeCreationContext _localctx = new RefTypeCreationContext(Context, State);
		EnterRule(_localctx, 42, RULE_refTypeCreation);
		try {
			State = 360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 356;
				Match(NEW);
				State = 357;
				arrayCreation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 358;
				Match(NEW);
				State = 359;
				structCreation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpressionContext variableExpression() {
			return GetRuleContext<VariableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public ArrayIndexingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndexing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndexing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexingContext arrayIndexing() {
		ArrayIndexingContext _localctx = new ArrayIndexingContext(Context, State);
		EnterRule(_localctx, 44, RULE_arrayIndexing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			variableExpression();
			State = 363;
			Match(BRAC_L);
			State = 364;
			expression(0);
			State = 365;
			Match(BRAC_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefTypeDestructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESTROY() { return GetToken(llParser.DESTROY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public RefTypeDestructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refTypeDestruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefTypeDestruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefTypeDestructionContext refTypeDestruction() {
		RefTypeDestructionContext _localctx = new RefTypeDestructionContext(Context, State);
		EnterRule(_localctx, 46, RULE_refTypeDestruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			Match(DESTROY);
			State = 368;
			valueAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructPropertiesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(llParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public StructPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structProperties; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructPropertiesContext structProperties() {
		StructPropertiesContext _localctx = new StructPropertiesContext(Context, State);
		EnterRule(_localctx, 48, RULE_structProperties);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			Match(WORD);
			State = 371;
			Match(COLON);
			State = 372;
			typeDefinition();
			State = 373;
			Match(SEMCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(llParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURL_L() { return GetToken(llParser.CURL_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURL_R() { return GetToken(llParser.CURL_R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructPropertiesContext[] structProperties() {
			return GetRuleContexts<StructPropertiesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructPropertiesContext structProperties(int i) {
			return GetRuleContext<StructPropertiesContext>(i);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 50, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			Match(STRUCT);
			State = 376;
			Match(WORD);
			State = 377;
			Match(CURL_L);
			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 378;
				structProperties();
				}
				}
				State = 381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WORD );
			State = 383;
			Match(CURL_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public StructNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructNameContext structName() {
		StructNameContext _localctx = new StructNameContext(Context, State);
		EnterRule(_localctx, 52, RULE_structName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructCreationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructNameContext structName() {
			return GetRuleContext<StructNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		public StructCreationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structCreation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructCreation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructCreationContext structCreation() {
		StructCreationContext _localctx = new StructCreationContext(Context, State);
		EnterRule(_localctx, 54, RULE_structCreation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			structName();
			State = 388;
			Match(PAR_L);
			State = 389;
			Match(PAR_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructPropertyAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpressionContext variableExpression() {
			return GetRuleContext<VariableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(llParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public StructPropertyAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structPropertyAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructPropertyAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructPropertyAccessContext structPropertyAccess() {
		StructPropertyAccessContext _localctx = new StructPropertyAccessContext(Context, State);
		EnterRule(_localctx, 56, RULE_structPropertyAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			variableExpression();
			State = 392;
			Match(DOT);
			State = 393;
			valueAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStatementContext : ParserRuleContext {
		public IToken fileName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(llParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public LoadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadStatementContext loadStatement() {
		LoadStatementContext _localctx = new LoadStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_loadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			Match(LOAD);
			State = 396;
			_localctx.fileName = Match(WORD);
			State = 397;
			Match(SEMCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionPrototypeContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(llParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(llParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext[] typeDefinition() {
			return GetRuleContexts<TypeDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext typeDefinition(int i) {
			return GetRuleContext<TypeDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(llParser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(llParser.WORD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(llParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(llParser.COMMA, i);
		}
		public FunctionPrototypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionPrototype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionPrototype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionPrototypeContext functionPrototype() {
		FunctionPrototypeContext _localctx = new FunctionPrototypeContext(Context, State);
		EnterRule(_localctx, 60, RULE_functionPrototype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			_localctx.name = Match(WORD);
			State = 400;
			Match(PAR_L);
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORD) {
				{
				State = 401;
				Match(WORD);
				State = 402;
				Match(COLON);
				State = 403;
				typeDefinition();
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 404;
					Match(COMMA);
					State = 405;
					Match(WORD);
					State = 406;
					Match(COLON);
					State = 407;
					typeDefinition();
					}
					}
					State = 412;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 415;
			Match(PAR_R);
			State = 416;
			Match(COLON);
			State = 417;
			typeDefinition();
			State = 418;
			Match(SEMCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpressionContext variableExpression() {
			return GetRuleContext<VariableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexingContext arrayIndexing() {
			return GetRuleContext<ArrayIndexingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructPropertyAccessContext structPropertyAccess() {
			return GetRuleContext<StructPropertyAccessContext>(0);
		}
		public ValueAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueAccessContext valueAccess() {
		ValueAccessContext _localctx = new ValueAccessContext(Context, State);
		EnterRule(_localctx, 62, RULE_valueAccess);
		try {
			State = 423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 420;
				variableExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 421;
				arrayIndexing();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 422;
				structPropertyAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		case 5: return Precpred(Context, 5);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x34', '\x1AC', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\a', '\x3', 'G', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', 'J', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x6', 
		'\x3', 'O', '\n', '\x3', '\r', '\x3', '\xE', '\x3', 'P', '\x3', '\x3', 
		'\x5', '\x3', 'T', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'X', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '^', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x66', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 't', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'z', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x89', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x8C', '\v', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x92', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x9F', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xC2', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\xCC', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\xD6', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\xE4', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xF3', 
		'\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\a', '\t', '\xFA', '\n', '\t', '\f', '\t', '\xE', '\t', '\xFD', 
		'\v', '\t', '\x5', '\t', '\xFF', '\n', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x10C', '\n', 
		'\n', '\f', '\n', '\xE', '\n', '\x10F', '\v', '\n', '\x5', '\n', '\x111', 
		'\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x5', '\f', '\x11B', '\n', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x11F', '\n', '\f', '\x3', 
		'\f', '\x5', '\f', '\x122', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\a', '\xE', '\x128', '\n', '\xE', '\f', '\xE', '\xE', 
		'\xE', '\x12B', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\x136', '\n', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x154', '\n', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\x165', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x16B', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x6', '\x1B', '\x17E', '\n', '\x1B', '\r', '\x1B', '\xE', '\x1B', '\x17F', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', ' ', '\x19B', 
		'\n', ' ', '\f', ' ', '\xE', ' ', '\x19E', '\v', ' ', '\x5', ' ', '\x1A0', 
		'\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x1AA', '\n', '!', '\x3', 
		'!', '\x2', '\x3', '\n', '\"', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x2', '\x5', '\x4', '\x2', '\x19', '\x19', 
		'\x1C', '\x1C', '\x3', '\x2', '\x1A', '\x1B', '\x3', '\x2', '\f', '\r', 
		'\x2', '\x1D5', '\x2', '\x42', '\x3', '\x2', '\x2', '\x2', '\x4', 'S', 
		'\x3', '\x2', '\x2', '\x2', '\x6', 'W', '\x3', '\x2', '\x2', '\x2', '\b', 
		']', '\x3', '\x2', '\x2', '\x2', '\n', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE', '\xF2', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\xF4', '\x3', '\x2', '\x2', '\x2', '\x12', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x117', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x121', '\x3', '\x2', '\x2', '\x2', '\x18', '\x123', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x125', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x137', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x13B', '\x3', '\x2', '\x2', '\x2', '\"', '\x13F', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x143', '\x3', '\x2', '\x2', '\x2', '&', '\x147', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x164', '\x3', '\x2', '\x2', '\x2', ',', '\x16A', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x30', '\x171', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x174', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x179', '\x3', '\x2', '\x2', '\x2', '\x36', '\x183', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x185', '\x3', '\x2', '\x2', '\x2', ':', '\x189', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x191', '\x3', '\x2', '\x2', '\x2', '@', '\x1A9', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x43', '\x5', '\x4', '\x3', '\x2', '\x43', '\x44', 
		'\a', '\x2', '\x2', '\x3', '\x44', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x45', 'G', '\x5', '<', '\x1F', '\x2', '\x46', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'G', 'J', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'N', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 'K', 'O', '\x5', 
		'\x12', '\n', '\x2', 'L', 'O', '\x5', '\x34', '\x1B', '\x2', 'M', 'O', 
		'\x5', '>', ' ', '\x2', 'N', 'K', '\x3', '\x2', '\x2', '\x2', 'N', 'L', 
		'\x3', '\x2', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 
		'P', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'T', '\x3', '\x2', '\x2', '\x2', 
		'R', 'T', '\x5', '\x6', '\x4', '\x2', 'S', 'H', '\x3', '\x2', '\x2', '\x2', 
		'S', 'R', '\x3', '\x2', '\x2', '\x2', 'T', '\x5', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'X', '\x5', '\f', '\a', '\x2', 'V', 'X', '\x5', '\n', '\x6', 
		'\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'X', '\a', '\x3', '\x2', '\x2', '\x2', 'Y', '^', '\x5', '\f', '\a', 
		'\x2', 'Z', '[', '\x5', '\n', '\x6', '\x2', '[', '\\', '\a', '%', '\x2', 
		'\x2', '\\', '^', '\x3', '\x2', '\x2', '\x2', ']', 'Y', '\x3', '\x2', 
		'\x2', '\x2', ']', 'Z', '\x3', '\x2', '\x2', '\x2', '^', '\t', '\x3', 
		'\x2', '\x2', '\x2', '_', '`', '\b', '\x6', '\x1', '\x2', '`', '\x61', 
		'\a', '\x1E', '\x2', '\x2', '\x61', '\x62', '\x5', '\n', '\x6', '\x2', 
		'\x62', '\x63', '\a', '\x1F', '\x2', '\x2', '\x63', '\x66', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x66', '\x5', '\xE', '\b', '\x2', '\x65', '_', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x8A', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\f', '\f', '\x2', 
		'\x2', 'h', 'i', '\a', '\x18', '\x2', '\x2', 'i', '\x89', '\x5', '\n', 
		'\x6', '\r', 'j', 'k', '\f', '\v', '\x2', '\x2', 'k', 'l', '\t', '\x2', 
		'\x2', '\x2', 'l', '\x89', '\x5', '\n', '\x6', '\f', 'm', 'n', '\f', '\n', 
		'\x2', '\x2', 'n', 'o', '\t', '\x3', '\x2', '\x2', 'o', '\x89', '\x5', 
		'\n', '\x6', '\v', 'p', 'q', '\f', '\t', '\x2', '\x2', 'q', 's', '\a', 
		'+', '\x2', '\x2', 'r', 't', '\a', ' ', '\x2', '\x2', 's', 'r', '\x3', 
		'\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', 
		'\x2', '\x2', '\x2', 'u', '\x89', '\x5', '\n', '\x6', '\n', 'v', 'w', 
		'\f', '\b', '\x2', '\x2', 'w', 'y', '\a', ',', '\x2', '\x2', 'x', 'z', 
		'\a', ' ', '\x2', '\x2', 'y', 'x', '\x3', '\x2', '\x2', '\x2', 'y', 'z', 
		'\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', '{', 
		'\x89', '\x5', '\n', '\x6', '\t', '|', '}', '\f', '\a', '\x2', '\x2', 
		'}', '~', '\a', '&', '\x2', '\x2', '~', '\x89', '\x5', '\n', '\x6', '\b', 
		'\x7F', '\x80', '\f', '\x6', '\x2', '\x2', '\x80', '\x81', '\a', '\x32', 
		'\x2', '\x2', '\x81', '\x89', '\x5', '\n', '\x6', '\a', '\x82', '\x83', 
		'\f', '\x5', '\x2', '\x2', '\x83', '\x84', '\a', '\x30', '\x2', '\x2', 
		'\x84', '\x89', '\x5', '\n', '\x6', '\x6', '\x85', '\x86', '\f', '\x4', 
		'\x2', '\x2', '\x86', '\x87', '\a', '\x31', '\x2', '\x2', '\x87', '\x89', 
		'\x5', '\n', '\x6', '\x5', '\x88', 'g', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'j', '\x3', '\x2', '\x2', '\x2', '\x88', 'm', '\x3', '\x2', '\x2', '\x2', 
		'\x88', 'p', '\x3', '\x2', '\x2', '\x2', '\x88', 'v', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '|', '\x3', '\x2', '\x2', '\x2', '\x88', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x82', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\v', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', '\x17', '\x2', 
		'\x2', '\x8E', '\x91', '\a', ' ', '\x2', '\x2', '\x8F', '\x92', '\x5', 
		'\n', '\x6', '\x2', '\x90', '\x92', '\x5', ',', '\x17', '\x2', '\x91', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x93', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\a', 
		'%', '\x2', '\x2', '\x94', '\xE4', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x96', '\x5', '.', '\x18', '\x2', '\x96', '\x97', '\a', ' ', '\x2', '\x2', 
		'\x97', '\x98', '\x5', '\n', '\x6', '\x2', '\x98', '\x99', '\a', '%', 
		'\x2', '\x2', '\x99', '\xE4', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', 
		'\x5', ':', '\x1E', '\x2', '\x9B', '\x9E', '\a', ' ', '\x2', '\x2', '\x9C', 
		'\x9F', '\x5', '\n', '\x6', '\x2', '\x9D', '\x9F', '\x5', ',', '\x17', 
		'\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xA1', '\a', '%', '\x2', '\x2', '\xA1', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA3', '\a', '\x17', '\x2', '\x2', '\xA3', '\xA4', '\a', 
		'\'', '\x2', '\x2', '\xA4', '\xA5', '\x5', '\n', '\x6', '\x2', '\xA5', 
		'\xA6', '\a', '%', '\x2', '\x2', '\xA6', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA8', '\a', '\x17', '\x2', '\x2', '\xA8', '\xA9', '\a', 
		'(', '\x2', '\x2', '\xA9', '\xAA', '\x5', '\n', '\x6', '\x2', '\xAA', 
		'\xAB', '\a', '%', '\x2', '\x2', '\xAB', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAD', '\a', '\x17', '\x2', '\x2', '\xAD', '\xAE', '\a', 
		')', '\x2', '\x2', '\xAE', '\xAF', '\x5', '\n', '\x6', '\x2', '\xAF', 
		'\xB0', '\a', '%', '\x2', '\x2', '\xB0', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB2', '\a', '\x17', '\x2', '\x2', '\xB2', '\xB3', '\a', 
		'*', '\x2', '\x2', '\xB3', '\xB4', '\x5', '\n', '\x6', '\x2', '\xB4', 
		'\xB5', '\a', '%', '\x2', '\x2', '\xB5', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB7', '\a', '\x17', '\x2', '\x2', '\xB7', '\xB8', '\a', 
		'-', '\x2', '\x2', '\xB8', '\xB9', '\x5', '\x1C', '\xF', '\x2', '\xB9', 
		'\xBA', '\a', '%', '\x2', '\x2', '\xBA', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBC', '\a', '\x17', '\x2', '\x2', '\xBC', '\xBD', '\a', 
		'-', '\x2', '\x2', '\xBD', '\xBE', '\x5', '\x1C', '\xF', '\x2', '\xBE', 
		'\xC1', '\a', ' ', '\x2', '\x2', '\xBF', '\xC2', '\x5', '\n', '\x6', '\x2', 
		'\xC0', '\xC2', '\x5', ',', '\x17', '\x2', '\xC1', '\xBF', '\x3', '\x2', 
		'\x2', '\x2', '\xC1', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\a', '%', '\x2', '\x2', '\xC4', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x5', '\x30', '\x19', 
		'\x2', '\xC6', '\xC7', '\a', '%', '\x2', '\x2', '\xC7', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xCB', '\a', '\x6', '\x2', '\x2', '\xC9', 
		'\xCC', '\x5', '\n', '\x6', '\x2', '\xCA', '\xCC', '\x5', ',', '\x17', 
		'\x2', '\xCB', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xE4', '\a', '%', '\x2', 
		'\x2', '\xCE', '\xCF', '\a', '\xE', '\x2', '\x2', '\xCF', '\xD0', '\a', 
		'\x1E', '\x2', '\x2', '\xD0', '\xD1', '\x5', '\x6', '\x4', '\x2', '\xD1', 
		'\xD2', '\a', '\x1F', '\x2', '\x2', '\xD2', '\xD5', '\x5', '\x1A', '\xE', 
		'\x2', '\xD3', '\xD4', '\a', '\xF', '\x2', '\x2', '\xD4', '\xD6', '\x5', 
		'\x1A', '\xE', '\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD8', '\a', '\x10', '\x2', '\x2', '\xD8', '\xD9', '\a', 
		'\x1E', '\x2', '\x2', '\xD9', '\xDA', '\x5', '\x6', '\x4', '\x2', '\xDA', 
		'\xDB', '\a', '\x1F', '\x2', '\x2', '\xDB', '\xDC', '\x5', '\x1A', '\xE', 
		'\x2', '\xDC', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\a', 
		'\x11', '\x2', '\x2', '\xDE', '\xDF', '\a', '\x1E', '\x2', '\x2', '\xDF', 
		'\xE0', '\x5', '\n', '\x6', '\x2', '\xE0', '\xE1', '\a', '\x1F', '\x2', 
		'\x2', '\xE1', '\xE2', '\a', '%', '\x2', '\x2', '\xE2', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\x8D', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\xE3', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xE4', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xF3', '\x5', '\x16', '\f', '\x2', '\xE6', 
		'\xF3', '\a', '\x5', '\x2', '\x2', '\xE7', '\xF3', '\x5', '\x18', '\r', 
		'\x2', '\xE8', '\xF3', '\x5', '\x10', '\t', '\x2', '\xE9', '\xF3', '\x5', 
		'\x14', '\v', '\x2', '\xEA', '\xF3', '\x5', '\x1E', '\x10', '\x2', '\xEB', 
		'\xF3', '\x5', ' ', '\x11', '\x2', '\xEC', '\xF3', '\x5', '$', '\x13', 
		'\x2', '\xED', '\xF3', '\x5', '\"', '\x12', '\x2', '\xEE', '\xF3', '\x5', 
		'&', '\x14', '\x2', '\xEF', '\xF3', '\x5', '.', '\x18', '\x2', '\xF0', 
		'\xF3', '\x5', ':', '\x1E', '\x2', '\xF1', '\xF3', '\a', '\x14', '\x2', 
		'\x2', '\xF2', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xE8', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xE9', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xED', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\a', '\x17', '\x2', 
		'\x2', '\xF5', '\xFE', '\a', '\x1E', '\x2', '\x2', '\xF6', '\xFB', '\x5', 
		'\n', '\x6', '\x2', '\xF7', '\xF8', '\a', '.', '\x2', '\x2', '\xF8', '\xFA', 
		'\x5', '\n', '\x6', '\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\xFB', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\xFD', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\xFE', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', 
		'\x2', '\x2', '\xFF', '\x100', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', 
		'\a', '\x1F', '\x2', '\x2', '\x101', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x103', '\a', '\x17', '\x2', '\x2', '\x103', '\x110', '\a', 
		'\x1E', '\x2', '\x2', '\x104', '\x105', '\a', '\x17', '\x2', '\x2', '\x105', 
		'\x106', '\a', '-', '\x2', '\x2', '\x106', '\x10D', '\x5', '\x1C', '\xF', 
		'\x2', '\x107', '\x108', '\a', '.', '\x2', '\x2', '\x108', '\x109', '\a', 
		'\x17', '\x2', '\x2', '\x109', '\x10A', '\a', '-', '\x2', '\x2', '\x10A', 
		'\x10C', '\x5', '\x1C', '\xF', '\x2', '\x10B', '\x107', '\x3', '\x2', 
		'\x2', '\x2', '\x10C', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x111', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\x104', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'\x111', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', 
		'\x2', '\x112', '\x113', '\a', '\x1F', '\x2', '\x2', '\x113', '\x114', 
		'\a', '-', '\x2', '\x2', '\x114', '\x115', '\x5', '\x1C', '\xF', '\x2', 
		'\x115', '\x116', '\x5', '\x1A', '\xE', '\x2', '\x116', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x118', '\a', '\x17', '\x2', '\x2', '\x118', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11B', '\t', '\x3', '\x2', 
		'\x2', '\x11A', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x122', '\a', '\x3', '\x2', '\x2', '\x11D', '\x11F', '\t', '\x3', 
		'\x2', '\x2', '\x11E', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x122', '\a', '\x4', '\x2', '\x2', '\x121', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x122', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\t', '\x4', '\x2', 
		'\x2', '\x124', '\x19', '\x3', '\x2', '\x2', '\x2', '\x125', '\x129', 
		'\a', '!', '\x2', '\x2', '\x126', '\x128', '\x5', '\b', '\x5', '\x2', 
		'\x127', '\x126', '\x3', '\x2', '\x2', '\x2', '\x128', '\x12B', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x127', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12C', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', 
		'\a', '\"', '\x2', '\x2', '\x12D', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x136', '\a', '\a', '\x2', '\x2', '\x12F', '\x136', '\a', '\b', 
		'\x2', '\x2', '\x130', '\x136', '\a', '\t', '\x2', '\x2', '\x131', '\x136', 
		'\a', '\n', '\x2', '\x2', '\x132', '\x136', '\a', '\v', '\x2', '\x2', 
		'\x133', '\x136', '\x5', '(', '\x15', '\x2', '\x134', '\x136', '\x5', 
		'\x36', '\x1C', '\x2', '\x135', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x135', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '\x135', '\x130', '\x3', '\x2', '\x2', 
		'\x2', '\x135', '\x131', '\x3', '\x2', '\x2', '\x2', '\x135', '\x132', 
		'\x3', '\x2', '\x2', '\x2', '\x135', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'\x135', '\x134', '\x3', '\x2', '\x2', '\x2', '\x136', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x137', '\x138', '\x5', '@', '!', '\x2', '\x138', 
		'\x139', '\a', '\x1A', '\x2', '\x2', '\x139', '\x13A', '\a', '\x1A', '\x2', 
		'\x2', '\x13A', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', 
		'\x5', '@', '!', '\x2', '\x13C', '\x13D', '\a', '\x1B', '\x2', '\x2', 
		'\x13D', '\x13E', '\a', '\x1B', '\x2', '\x2', '\x13E', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x13F', '\x140', '\a', '\x1A', '\x2', '\x2', '\x140', '\x141', 
		'\a', '\x1A', '\x2', '\x2', '\x141', '\x142', '\x5', '@', '!', '\x2', 
		'\x142', '#', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\a', '\x1B', 
		'\x2', '\x2', '\x144', '\x145', '\a', '\x1B', '\x2', '\x2', '\x145', '\x146', 
		'\x5', '@', '!', '\x2', '\x146', '%', '\x3', '\x2', '\x2', '\x2', '\x147', 
		'\x148', '\a', '/', '\x2', '\x2', '\x148', '\x149', '\x5', '\n', '\x6', 
		'\x2', '\x149', '\'', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\a', 
		'\a', '\x2', '\x2', '\x14B', '\x14C', '\a', '#', '\x2', '\x2', '\x14C', 
		'\x154', '\a', '$', '\x2', '\x2', '\x14D', '\x14E', '\a', '\b', '\x2', 
		'\x2', '\x14E', '\x14F', '\a', '#', '\x2', '\x2', '\x14F', '\x154', '\a', 
		'$', '\x2', '\x2', '\x150', '\x151', '\a', '\t', '\x2', '\x2', '\x151', 
		'\x152', '\a', '#', '\x2', '\x2', '\x152', '\x154', '\a', '$', '\x2', 
		'\x2', '\x153', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x153', '\x14D', 
		'\x3', '\x2', '\x2', '\x2', '\x153', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'\x154', ')', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\a', '\a', 
		'\x2', '\x2', '\x156', '\x157', '\a', '#', '\x2', '\x2', '\x157', '\x158', 
		'\x5', '\n', '\x6', '\x2', '\x158', '\x159', '\a', '$', '\x2', '\x2', 
		'\x159', '\x165', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\a', 
		'\b', '\x2', '\x2', '\x15B', '\x15C', '\a', '#', '\x2', '\x2', '\x15C', 
		'\x15D', '\x5', '\n', '\x6', '\x2', '\x15D', '\x15E', '\a', '$', '\x2', 
		'\x2', '\x15E', '\x165', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x160', 
		'\a', '\t', '\x2', '\x2', '\x160', '\x161', '\a', '#', '\x2', '\x2', '\x161', 
		'\x162', '\x5', '\n', '\x6', '\x2', '\x162', '\x163', '\a', '$', '\x2', 
		'\x2', '\x163', '\x165', '\x3', '\x2', '\x2', '\x2', '\x164', '\x155', 
		'\x3', '\x2', '\x2', '\x2', '\x164', '\x15A', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x165', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x166', '\x167', '\a', '\x12', '\x2', '\x2', '\x167', '\x16B', 
		'\x5', '*', '\x16', '\x2', '\x168', '\x169', '\a', '\x12', '\x2', '\x2', 
		'\x169', '\x16B', '\x5', '\x38', '\x1D', '\x2', '\x16A', '\x166', '\x3', 
		'\x2', '\x2', '\x2', '\x16A', '\x168', '\x3', '\x2', '\x2', '\x2', '\x16B', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', '\x5', '\x14', '\v', 
		'\x2', '\x16D', '\x16E', '\a', '#', '\x2', '\x2', '\x16E', '\x16F', '\x5', 
		'\n', '\x6', '\x2', '\x16F', '\x170', '\a', '$', '\x2', '\x2', '\x170', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x171', '\x172', '\a', '\x13', '\x2', 
		'\x2', '\x172', '\x173', '\x5', '@', '!', '\x2', '\x173', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\x175', '\a', '\x17', '\x2', '\x2', '\x175', 
		'\x176', '\a', '-', '\x2', '\x2', '\x176', '\x177', '\x5', '\x1C', '\xF', 
		'\x2', '\x177', '\x178', '\a', '%', '\x2', '\x2', '\x178', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x179', '\x17A', '\a', '\x15', '\x2', '\x2', '\x17A', 
		'\x17B', '\a', '\x17', '\x2', '\x2', '\x17B', '\x17D', '\a', '!', '\x2', 
		'\x2', '\x17C', '\x17E', '\x5', '\x32', '\x1A', '\x2', '\x17D', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', '\x3', '\x2', '\x2', '\x2', 
		'\x17F', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\x3', 
		'\x2', '\x2', '\x2', '\x180', '\x181', '\x3', '\x2', '\x2', '\x2', '\x181', 
		'\x182', '\a', '\"', '\x2', '\x2', '\x182', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x183', '\x184', '\a', '\x17', '\x2', '\x2', '\x184', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x186', '\x5', '\x36', '\x1C', '\x2', 
		'\x186', '\x187', '\a', '\x1E', '\x2', '\x2', '\x187', '\x188', '\a', 
		'\x1F', '\x2', '\x2', '\x188', '\x39', '\x3', '\x2', '\x2', '\x2', '\x189', 
		'\x18A', '\x5', '\x14', '\v', '\x2', '\x18A', '\x18B', '\a', '\x1D', '\x2', 
		'\x2', '\x18B', '\x18C', '\x5', '@', '!', '\x2', '\x18C', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x18D', '\x18E', '\a', '\x16', '\x2', '\x2', '\x18E', 
		'\x18F', '\a', '\x17', '\x2', '\x2', '\x18F', '\x190', '\a', '%', '\x2', 
		'\x2', '\x190', '=', '\x3', '\x2', '\x2', '\x2', '\x191', '\x192', '\a', 
		'\x17', '\x2', '\x2', '\x192', '\x19F', '\a', '\x1E', '\x2', '\x2', '\x193', 
		'\x194', '\a', '\x17', '\x2', '\x2', '\x194', '\x195', '\a', '-', '\x2', 
		'\x2', '\x195', '\x19C', '\x5', '\x1C', '\xF', '\x2', '\x196', '\x197', 
		'\a', '.', '\x2', '\x2', '\x197', '\x198', '\a', '\x17', '\x2', '\x2', 
		'\x198', '\x199', '\a', '-', '\x2', '\x2', '\x199', '\x19B', '\x5', '\x1C', 
		'\xF', '\x2', '\x19A', '\x196', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19E', 
		'\x3', '\x2', '\x2', '\x2', '\x19C', '\x19A', '\x3', '\x2', '\x2', '\x2', 
		'\x19C', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x1A0', '\x3', 
		'\x2', '\x2', '\x2', '\x19E', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19F', 
		'\x193', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', '\x3', '\x2', '\x2', 
		'\x2', '\x1A0', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A2', 
		'\a', '\x1F', '\x2', '\x2', '\x1A2', '\x1A3', '\a', '-', '\x2', '\x2', 
		'\x1A3', '\x1A4', '\x5', '\x1C', '\xF', '\x2', '\x1A4', '\x1A5', '\a', 
		'%', '\x2', '\x2', '\x1A5', '?', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		'\x1AA', '\x5', '\x14', '\v', '\x2', '\x1A7', '\x1AA', '\x5', '.', '\x18', 
		'\x2', '\x1A8', '\x1AA', '\x5', ':', '\x1E', '\x2', '\x1A9', '\x1A6', 
		'\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1A7', '\x3', '\x2', '\x2', '\x2', 
		'\x1A9', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '$', 'H', 'N', 'P', 'S', 'W', ']', '\x65', 's', 'y', 
		'\x88', '\x8A', '\x91', '\x9E', '\xC1', '\xCB', '\xD5', '\xE3', '\xF2', 
		'\xFB', '\xFE', '\x10D', '\x110', '\x11A', '\x11E', '\x121', '\x129', 
		'\x135', '\x153', '\x164', '\x16A', '\x17F', '\x19C', '\x19F', '\x1A9',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace LL
