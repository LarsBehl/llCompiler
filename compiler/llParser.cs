//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ll.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ll {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class llParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOUBLE_LITERAL=1, INTEGER_LITERAL=2, RETURN=3, INT_TYPE=4, DOUBLE_TYPE=5, 
		BOOL_TYPE=6, VOID_TYPE=7, BOOL_TRUE=8, BOOL_FALSE=9, IF=10, ELSE=11, WHILE=12, 
		PRINT=13, NEW=14, DESTROY=15, NULL=16, STRUCT=17, WORD=18, MULT=19, PLUS=20, 
		MINUS=21, DIV=22, DOT=23, PAR_L=24, PAR_R=25, ASSIGN=26, CURL_L=27, CURL_R=28, 
		BRAC_L=29, BRAC_R=30, SEMCOL=31, EQUAL=32, ADD_ASSIGN=33, SUB_ASSIGN=34, 
		MULT_ASSIGN=35, DIV_ASSIGN=36, LESS=37, GREATER=38, COLON=39, COMMA=40, 
		NOT=41, AND=42, OR=43, NOT_EQUAL=44, WHITESPACE=45;
	public const int
		RULE_compileUnit = 0, RULE_program = 1, RULE_compositUnit = 2, RULE_line = 3, 
		RULE_expression = 4, RULE_statement = 5, RULE_unaryExpression = 6, RULE_functionCall = 7, 
		RULE_functionDefinition = 8, RULE_variableExpression = 9, RULE_numericExpression = 10, 
		RULE_boolExpression = 11, RULE_blockStatement = 12, RULE_typeDefinition = 13, 
		RULE_incrementPostExpression = 14, RULE_decrementPostExpression = 15, 
		RULE_incrementPreExpression = 16, RULE_decrementPreExpression = 17, RULE_notExpression = 18, 
		RULE_arrayTypes = 19, RULE_arrayCreation = 20, RULE_refTypeCreation = 21, 
		RULE_arrayIndexing = 22, RULE_refTypeDestruction = 23, RULE_structProperties = 24, 
		RULE_structDefinition = 25, RULE_structName = 26, RULE_structCreation = 27;
	public static readonly string[] ruleNames = {
		"compileUnit", "program", "compositUnit", "line", "expression", "statement", 
		"unaryExpression", "functionCall", "functionDefinition", "variableExpression", 
		"numericExpression", "boolExpression", "blockStatement", "typeDefinition", 
		"incrementPostExpression", "decrementPostExpression", "incrementPreExpression", 
		"decrementPreExpression", "notExpression", "arrayTypes", "arrayCreation", 
		"refTypeCreation", "arrayIndexing", "refTypeDestruction", "structProperties", 
		"structDefinition", "structName", "structCreation"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "'*'", "'+'", "'-'", "'/'", 
		"'.'", "'('", "')'", "'='", "'{'", "'}'", "'['", "']'", "';'", null, null, 
		null, null, null, "'<'", "'>'", "':'", "','", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOUBLE_LITERAL", "INTEGER_LITERAL", "RETURN", "INT_TYPE", "DOUBLE_TYPE", 
		"BOOL_TYPE", "VOID_TYPE", "BOOL_TRUE", "BOOL_FALSE", "IF", "ELSE", "WHILE", 
		"PRINT", "NEW", "DESTROY", "NULL", "STRUCT", "WORD", "MULT", "PLUS", "MINUS", 
		"DIV", "DOT", "PAR_L", "PAR_R", "ASSIGN", "CURL_L", "CURL_R", "BRAC_L", 
		"BRAC_R", "SEMCOL", "EQUAL", "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", 
		"DIV_ASSIGN", "LESS", "GREATER", "COLON", "COMMA", "NOT", "AND", "OR", 
		"NOT_EQUAL", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ll.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static llParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public llParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public llParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(llParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; program();
			State = 57; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		public FunctionDefinitionContext[] functionDefinition() {
			return GetRuleContexts<FunctionDefinitionContext>();
		}
		public FunctionDefinitionContext functionDefinition(int i) {
			return GetRuleContext<FunctionDefinitionContext>(i);
		}
		public StructDefinitionContext[] structDefinition() {
			return GetRuleContexts<StructDefinitionContext>();
		}
		public StructDefinitionContext structDefinition(int i) {
			return GetRuleContext<StructDefinitionContext>(i);
		}
		public CompositUnitContext compositUnit() {
			return GetRuleContext<CompositUnitContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 2, RULE_program);
		int _la;
		try {
			State = 66;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 61;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case WORD:
						{
						State = 59; functionDefinition();
						}
						break;
					case STRUCT:
						{
						State = 60; structDefinition();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 63;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==STRUCT || _la==WORD );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; compositUnit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositUnitContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CompositUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositUnit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositUnitContext compositUnit() {
		CompositUnitContext _localctx = new CompositUnitContext(Context, State);
		EnterRule(_localctx, 4, RULE_compositUnit);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 6, RULE_line);
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73; expression(0);
				State = 74; Match(SEMCOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LessOperatorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LESS() { return GetToken(llParser.LESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(llParser.ASSIGN, 0); }
		public LessOperatorContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrOperatorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OR() { return GetToken(llParser.OR, 0); }
		public OrOperatorContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinOpAddSubContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(llParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(llParser.MINUS, 0); }
		public BinOpAddSubContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinOpAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotEqualOperatorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode NOT_EQUAL() { return GetToken(llParser.NOT_EQUAL, 0); }
		public NotEqualOperatorContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotEqualOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExprContext : ExpressionContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public UnaryExprContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinOpMultDivContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(llParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(llParser.DIV, 0); }
		public BinOpMultDivContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinOpMultDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesContext : ExpressionContext {
		public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		public ParenthesContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterOperatorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode GREATER() { return GetToken(llParser.GREATER, 0); }
		public ITerminalNode ASSIGN() { return GetToken(llParser.ASSIGN, 0); }
		public GreaterOperatorContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityOpertorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQUAL() { return GetToken(llParser.EQUAL, 0); }
		public EqualityOpertorContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityOpertor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndOperatorContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(llParser.AND, 0); }
		public AndOperatorContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PAR_L:
				{
				_localctx = new ParenthesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 79; Match(PAR_L);
				State = 80; expression(0);
				State = 81; Match(PAR_R);
				}
				break;
			case DOUBLE_LITERAL:
			case INTEGER_LITERAL:
			case BOOL_TRUE:
			case BOOL_FALSE:
			case NULL:
			case WORD:
			case PLUS:
			case MINUS:
			case NOT:
				{
				_localctx = new UnaryExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 83; unaryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 118;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 116;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new BinOpMultDivContext(new ExpressionContext(_parentctx, _parentState));
						((BinOpMultDivContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 86;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 87;
						((BinOpMultDivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MULT || _la==DIV) ) {
							((BinOpMultDivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 88; ((BinOpMultDivContext)_localctx).right = expression(10);
						}
						break;
					case 2:
						{
						_localctx = new BinOpAddSubContext(new ExpressionContext(_parentctx, _parentState));
						((BinOpAddSubContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 89;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 90;
						((BinOpAddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((BinOpAddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 91; ((BinOpAddSubContext)_localctx).right = expression(9);
						}
						break;
					case 3:
						{
						_localctx = new EqualityOpertorContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityOpertorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 92;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 93; ((EqualityOpertorContext)_localctx).op = Match(EQUAL);
						State = 94; ((EqualityOpertorContext)_localctx).right = expression(8);
						}
						break;
					case 4:
						{
						_localctx = new LessOperatorContext(new ExpressionContext(_parentctx, _parentState));
						((LessOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 95;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 96; ((LessOperatorContext)_localctx).op = Match(LESS);
						State = 98;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ASSIGN) {
							{
							State = 97; Match(ASSIGN);
							}
						}

						State = 100; ((LessOperatorContext)_localctx).right = expression(7);
						}
						break;
					case 5:
						{
						_localctx = new GreaterOperatorContext(new ExpressionContext(_parentctx, _parentState));
						((GreaterOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 101;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 102; ((GreaterOperatorContext)_localctx).op = Match(GREATER);
						State = 104;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ASSIGN) {
							{
							State = 103; Match(ASSIGN);
							}
						}

						State = 106; ((GreaterOperatorContext)_localctx).right = expression(6);
						}
						break;
					case 6:
						{
						_localctx = new AndOperatorContext(new ExpressionContext(_parentctx, _parentState));
						((AndOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 107;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 108; ((AndOperatorContext)_localctx).op = Match(AND);
						State = 109; ((AndOperatorContext)_localctx).right = expression(5);
						}
						break;
					case 7:
						{
						_localctx = new OrOperatorContext(new ExpressionContext(_parentctx, _parentState));
						((OrOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 110;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 111; ((OrOperatorContext)_localctx).op = Match(OR);
						State = 112; ((OrOperatorContext)_localctx).right = expression(4);
						}
						break;
					case 8:
						{
						_localctx = new NotEqualOperatorContext(new ExpressionContext(_parentctx, _parentState));
						((NotEqualOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 113;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 114; ((NotEqualOperatorContext)_localctx).op = Match(NOT_EQUAL);
						State = 115; ((NotEqualOperatorContext)_localctx).right = expression(3);
						}
						break;
					}
					} 
				}
				State = 120;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignArrayFieldContext : StatementContext {
		public ArrayIndexingContext left;
		public ITerminalNode ASSIGN() { return GetToken(llParser.ASSIGN, 0); }
		public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public ArrayIndexingContext arrayIndexing() {
			return GetRuleContext<ArrayIndexingContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignArrayFieldContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignArrayField(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public ITerminalNode RETURN() { return GetToken(llParser.RETURN, 0); }
		public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RefTypeCreationContext refTypeCreation() {
			return GetRuleContext<RefTypeCreationContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public CompositUnitContext cond;
		public ITerminalNode IF() { return GetToken(llParser.IF, 0); }
		public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public CompositUnitContext compositUnit() {
			return GetRuleContext<CompositUnitContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(llParser.ELSE, 0); }
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubAssignStatementContext : StatementContext {
		public IToken left;
		public ExpressionContext right;
		public ITerminalNode SUB_ASSIGN() { return GetToken(llParser.SUB_ASSIGN, 0); }
		public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubAssignStatementContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		public CompositUnitContext cond;
		public ITerminalNode WHILE() { return GetToken(llParser.WHILE, 0); }
		public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public CompositUnitContext compositUnit() {
			return GetRuleContext<CompositUnitContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintStatementContext : StatementContext {
		public ITerminalNode PRINT() { return GetToken(llParser.PRINT, 0); }
		public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public PrintStatementContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InitializationStatementContext : StatementContext {
		public IToken left;
		public TypeDefinitionContext type;
		public ITerminalNode COLON() { return GetToken(llParser.COLON, 0); }
		public ITerminalNode ASSIGN() { return GetToken(llParser.ASSIGN, 0); }
		public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RefTypeCreationContext refTypeCreation() {
			return GetRuleContext<RefTypeCreationContext>(0);
		}
		public InitializationStatementContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DestructionStatementContext : StatementContext {
		public RefTypeDestructionContext refTypeDestruction() {
			return GetRuleContext<RefTypeDestructionContext>(0);
		}
		public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public DestructionStatementContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultAssignStatementContext : StatementContext {
		public IToken left;
		public ExpressionContext right;
		public ITerminalNode MULT_ASSIGN() { return GetToken(llParser.MULT_ASSIGN, 0); }
		public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MultAssignStatementContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddAssignStatementContext : StatementContext {
		public IToken left;
		public ExpressionContext right;
		public ITerminalNode ADD_ASSIGN() { return GetToken(llParser.ADD_ASSIGN, 0); }
		public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AddAssignStatementContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStatementContext : StatementContext {
		public IToken left;
		public ITerminalNode ASSIGN() { return GetToken(llParser.ASSIGN, 0); }
		public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RefTypeCreationContext refTypeCreation() {
			return GetRuleContext<RefTypeCreationContext>(0);
		}
		public AssignStatementContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstantiationStatementContext : StatementContext {
		public IToken left;
		public TypeDefinitionContext type;
		public ITerminalNode COLON() { return GetToken(llParser.COLON, 0); }
		public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		public InstantiationStatementContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstantiationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivAssignStatementContext : StatementContext {
		public IToken left;
		public ExpressionContext right;
		public ITerminalNode DIV_ASSIGN() { return GetToken(llParser.DIV_ASSIGN, 0); }
		public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DivAssignStatementContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_statement);
		int _la;
		try {
			State = 199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new AssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 121; ((AssignStatementContext)_localctx).left = Match(WORD);
				State = 122; Match(ASSIGN);
				State = 125;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOUBLE_LITERAL:
				case INTEGER_LITERAL:
				case BOOL_TRUE:
				case BOOL_FALSE:
				case NULL:
				case WORD:
				case PLUS:
				case MINUS:
				case PAR_L:
				case NOT:
					{
					State = 123; expression(0);
					}
					break;
				case NEW:
					{
					State = 124; refTypeCreation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 127; Match(SEMCOL);
				}
				break;
			case 2:
				_localctx = new AssignArrayFieldContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 129; ((AssignArrayFieldContext)_localctx).left = arrayIndexing();
				State = 130; Match(ASSIGN);
				{
				State = 131; expression(0);
				}
				State = 132; Match(SEMCOL);
				}
				break;
			case 3:
				_localctx = new AddAssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 134; ((AddAssignStatementContext)_localctx).left = Match(WORD);
				State = 135; Match(ADD_ASSIGN);
				State = 136; ((AddAssignStatementContext)_localctx).right = expression(0);
				State = 137; Match(SEMCOL);
				}
				break;
			case 4:
				_localctx = new SubAssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 139; ((SubAssignStatementContext)_localctx).left = Match(WORD);
				State = 140; Match(SUB_ASSIGN);
				State = 141; ((SubAssignStatementContext)_localctx).right = expression(0);
				State = 142; Match(SEMCOL);
				}
				break;
			case 5:
				_localctx = new MultAssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 144; ((MultAssignStatementContext)_localctx).left = Match(WORD);
				State = 145; Match(MULT_ASSIGN);
				State = 146; ((MultAssignStatementContext)_localctx).right = expression(0);
				State = 147; Match(SEMCOL);
				}
				break;
			case 6:
				_localctx = new DivAssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 149; ((DivAssignStatementContext)_localctx).left = Match(WORD);
				State = 150; Match(DIV_ASSIGN);
				State = 151; ((DivAssignStatementContext)_localctx).right = expression(0);
				State = 152; Match(SEMCOL);
				}
				break;
			case 7:
				_localctx = new InstantiationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 154; ((InstantiationStatementContext)_localctx).left = Match(WORD);
				State = 155; Match(COLON);
				State = 156; ((InstantiationStatementContext)_localctx).type = typeDefinition();
				State = 157; Match(SEMCOL);
				}
				break;
			case 8:
				_localctx = new InitializationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 159; ((InitializationStatementContext)_localctx).left = Match(WORD);
				State = 160; Match(COLON);
				State = 161; ((InitializationStatementContext)_localctx).type = typeDefinition();
				State = 162; Match(ASSIGN);
				State = 165;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOUBLE_LITERAL:
				case INTEGER_LITERAL:
				case BOOL_TRUE:
				case BOOL_FALSE:
				case NULL:
				case WORD:
				case PLUS:
				case MINUS:
				case PAR_L:
				case NOT:
					{
					State = 163; expression(0);
					}
					break;
				case NEW:
					{
					State = 164; refTypeCreation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 167; Match(SEMCOL);
				}
				break;
			case 9:
				_localctx = new DestructionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 169; refTypeDestruction();
				State = 170; Match(SEMCOL);
				}
				break;
			case 10:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 172; Match(RETURN);
				State = 175;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOUBLE_LITERAL:
				case INTEGER_LITERAL:
				case BOOL_TRUE:
				case BOOL_FALSE:
				case NULL:
				case WORD:
				case PLUS:
				case MINUS:
				case PAR_L:
				case NOT:
					{
					State = 173; expression(0);
					}
					break;
				case NEW:
					{
					State = 174; refTypeCreation();
					}
					break;
				case SEMCOL:
					break;
				default:
					break;
				}
				State = 177; Match(SEMCOL);
				}
				break;
			case 11:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 178; Match(IF);
				State = 179; Match(PAR_L);
				State = 180; ((IfStatementContext)_localctx).cond = compositUnit();
				State = 181; Match(PAR_R);
				State = 182; blockStatement();
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 183; Match(ELSE);
					State = 184; blockStatement();
					}
				}

				}
				break;
			case 12:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 187; Match(WHILE);
				State = 188; Match(PAR_L);
				State = 189; ((WhileStatementContext)_localctx).cond = compositUnit();
				State = 190; Match(PAR_R);
				State = 191; blockStatement();
				}
				break;
			case 13:
				_localctx = new PrintStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 193; Match(PRINT);
				State = 194; Match(PAR_L);
				State = 195; expression(0);
				State = 196; Match(PAR_R);
				State = 197; Match(SEMCOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public NumericExpressionContext numericExpression() {
			return GetRuleContext<NumericExpressionContext>(0);
		}
		public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public VariableExpressionContext variableExpression() {
			return GetRuleContext<VariableExpressionContext>(0);
		}
		public IncrementPostExpressionContext incrementPostExpression() {
			return GetRuleContext<IncrementPostExpressionContext>(0);
		}
		public DecrementPostExpressionContext decrementPostExpression() {
			return GetRuleContext<DecrementPostExpressionContext>(0);
		}
		public DecrementPreExpressionContext decrementPreExpression() {
			return GetRuleContext<DecrementPreExpressionContext>(0);
		}
		public IncrementPreExpressionContext incrementPreExpression() {
			return GetRuleContext<IncrementPreExpressionContext>(0);
		}
		public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		public ArrayIndexingContext arrayIndexing() {
			return GetRuleContext<ArrayIndexingContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(llParser.NULL, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_unaryExpression);
		try {
			State = 212;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201; numericExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 202; boolExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 203; functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 204; variableExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 205; incrementPostExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 206; decrementPostExpression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 207; decrementPreExpression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 208; incrementPreExpression();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 209; notExpression();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 210; arrayIndexing();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 211; Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(llParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(llParser.COMMA, i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; _localctx.name = Match(WORD);
			State = 215; Match(PAR_L);
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE_LITERAL) | (1L << INTEGER_LITERAL) | (1L << BOOL_TRUE) | (1L << BOOL_FALSE) | (1L << NULL) | (1L << WORD) | (1L << PLUS) | (1L << MINUS) | (1L << PAR_L) | (1L << NOT))) != 0)) {
				{
				State = 216; expression(0);
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 217; Match(COMMA);
					State = 218; expression(0);
					}
					}
					State = 223;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 226; Match(PAR_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public IToken name;
		public BlockStatementContext body;
		public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		public ITerminalNode[] COLON() { return GetTokens(llParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(llParser.COLON, i);
		}
		public TypeDefinitionContext[] typeDefinition() {
			return GetRuleContexts<TypeDefinitionContext>();
		}
		public TypeDefinitionContext typeDefinition(int i) {
			return GetRuleContext<TypeDefinitionContext>(i);
		}
		public ITerminalNode[] WORD() { return GetTokens(llParser.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(llParser.WORD, i);
		}
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(llParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(llParser.COMMA, i);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; _localctx.name = Match(WORD);
			State = 229; Match(PAR_L);
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORD) {
				{
				State = 230; Match(WORD);
				State = 231; Match(COLON);
				State = 232; typeDefinition();
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 233; Match(COMMA);
					State = 234; Match(WORD);
					State = 235; Match(COLON);
					State = 236; typeDefinition();
					}
					}
					State = 241;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 244; Match(PAR_R);
			State = 245; Match(COLON);
			State = 246; typeDefinition();
			State = 247; _localctx.body = blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableExpressionContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public VariableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableExpressionContext variableExpression() {
		VariableExpressionContext _localctx = new VariableExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericExpressionContext : ParserRuleContext {
		public NumericExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericExpression; } }
	 
		public NumericExpressionContext() { }
		public virtual void CopyFrom(NumericExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntegerAtomExpressionContext : NumericExpressionContext {
		public IToken sign;
		public ITerminalNode INTEGER_LITERAL() { return GetToken(llParser.INTEGER_LITERAL, 0); }
		public ITerminalNode MINUS() { return GetToken(llParser.MINUS, 0); }
		public ITerminalNode PLUS() { return GetToken(llParser.PLUS, 0); }
		public IntegerAtomExpressionContext(NumericExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerAtomExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleAtomExpressionContext : NumericExpressionContext {
		public IToken sign;
		public ITerminalNode DOUBLE_LITERAL() { return GetToken(llParser.DOUBLE_LITERAL, 0); }
		public ITerminalNode MINUS() { return GetToken(llParser.MINUS, 0); }
		public ITerminalNode PLUS() { return GetToken(llParser.PLUS, 0); }
		public DoubleAtomExpressionContext(NumericExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleAtomExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericExpressionContext numericExpression() {
		NumericExpressionContext _localctx = new NumericExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_numericExpression);
		int _la;
		try {
			State = 259;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new DoubleAtomExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 251;
					((DoubleAtomExpressionContext)_localctx).sign = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
						((DoubleAtomExpressionContext)_localctx).sign = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 254; Match(DOUBLE_LITERAL);
				}
				break;
			case 2:
				_localctx = new IntegerAtomExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 255;
					((IntegerAtomExpressionContext)_localctx).sign = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
						((IntegerAtomExpressionContext)_localctx).sign = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 258; Match(INTEGER_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExpressionContext : ParserRuleContext {
		public ITerminalNode BOOL_TRUE() { return GetToken(llParser.BOOL_TRUE, 0); }
		public ITerminalNode BOOL_FALSE() { return GetToken(llParser.BOOL_FALSE, 0); }
		public BoolExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExpressionContext boolExpression() {
		BoolExpressionContext _localctx = new BoolExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_boolExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			_la = TokenStream.LA(1);
			if ( !(_la==BOOL_TRUE || _la==BOOL_FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public ITerminalNode CURL_L() { return GetToken(llParser.CURL_L, 0); }
		public ITerminalNode CURL_R() { return GetToken(llParser.CURL_R, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_blockStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; Match(CURL_L);
			State = 267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE_LITERAL) | (1L << INTEGER_LITERAL) | (1L << RETURN) | (1L << BOOL_TRUE) | (1L << BOOL_FALSE) | (1L << IF) | (1L << WHILE) | (1L << PRINT) | (1L << DESTROY) | (1L << NULL) | (1L << WORD) | (1L << PLUS) | (1L << MINUS) | (1L << PAR_L) | (1L << NOT))) != 0)) {
				{
				{
				State = 264; line();
				}
				}
				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 270; Match(CURL_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefinitionContext : ParserRuleContext {
		public ITerminalNode INT_TYPE() { return GetToken(llParser.INT_TYPE, 0); }
		public ITerminalNode DOUBLE_TYPE() { return GetToken(llParser.DOUBLE_TYPE, 0); }
		public ITerminalNode BOOL_TYPE() { return GetToken(llParser.BOOL_TYPE, 0); }
		public ITerminalNode VOID_TYPE() { return GetToken(llParser.VOID_TYPE, 0); }
		public ArrayTypesContext arrayTypes() {
			return GetRuleContext<ArrayTypesContext>(0);
		}
		public StructNameContext structName() {
			return GetRuleContext<StructNameContext>(0);
		}
		public TypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefinition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefinitionContext typeDefinition() {
		TypeDefinitionContext _localctx = new TypeDefinitionContext(Context, State);
		EnterRule(_localctx, 26, RULE_typeDefinition);
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272; Match(INT_TYPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273; Match(DOUBLE_TYPE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 274; Match(BOOL_TYPE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 275; Match(VOID_TYPE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 276; arrayTypes();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 277; structName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementPostExpressionContext : ParserRuleContext {
		public VariableExpressionContext variableExpression() {
			return GetRuleContext<VariableExpressionContext>(0);
		}
		public ITerminalNode[] PLUS() { return GetTokens(llParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(llParser.PLUS, i);
		}
		public IncrementPostExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incrementPostExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementPostExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementPostExpressionContext incrementPostExpression() {
		IncrementPostExpressionContext _localctx = new IncrementPostExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_incrementPostExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; variableExpression();
			State = 281; Match(PLUS);
			State = 282; Match(PLUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecrementPostExpressionContext : ParserRuleContext {
		public VariableExpressionContext variableExpression() {
			return GetRuleContext<VariableExpressionContext>(0);
		}
		public ITerminalNode[] MINUS() { return GetTokens(llParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(llParser.MINUS, i);
		}
		public DecrementPostExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decrementPostExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrementPostExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecrementPostExpressionContext decrementPostExpression() {
		DecrementPostExpressionContext _localctx = new DecrementPostExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_decrementPostExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; variableExpression();
			State = 285; Match(MINUS);
			State = 286; Match(MINUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementPreExpressionContext : ParserRuleContext {
		public ITerminalNode[] PLUS() { return GetTokens(llParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(llParser.PLUS, i);
		}
		public VariableExpressionContext variableExpression() {
			return GetRuleContext<VariableExpressionContext>(0);
		}
		public IncrementPreExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incrementPreExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementPreExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementPreExpressionContext incrementPreExpression() {
		IncrementPreExpressionContext _localctx = new IncrementPreExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_incrementPreExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(PLUS);
			State = 289; Match(PLUS);
			State = 290; variableExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecrementPreExpressionContext : ParserRuleContext {
		public ITerminalNode[] MINUS() { return GetTokens(llParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(llParser.MINUS, i);
		}
		public VariableExpressionContext variableExpression() {
			return GetRuleContext<VariableExpressionContext>(0);
		}
		public DecrementPreExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decrementPreExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrementPreExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecrementPreExpressionContext decrementPreExpression() {
		DecrementPreExpressionContext _localctx = new DecrementPreExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_decrementPreExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; Match(MINUS);
			State = 293; Match(MINUS);
			State = 294; variableExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(llParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_notExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296; Match(NOT);
			State = 297; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypesContext : ParserRuleContext {
		public ArrayTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTypes; } }
	 
		public ArrayTypesContext() { }
		public virtual void CopyFrom(ArrayTypesContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolArrayTypeContext : ArrayTypesContext {
		public ITerminalNode BOOL_TYPE() { return GetToken(llParser.BOOL_TYPE, 0); }
		public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public BoolArrayTypeContext(ArrayTypesContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntArrayTypeContext : ArrayTypesContext {
		public ITerminalNode INT_TYPE() { return GetToken(llParser.INT_TYPE, 0); }
		public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public IntArrayTypeContext(ArrayTypesContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleArrayTypeContext : ArrayTypesContext {
		public ITerminalNode DOUBLE_TYPE() { return GetToken(llParser.DOUBLE_TYPE, 0); }
		public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public DoubleArrayTypeContext(ArrayTypesContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypesContext arrayTypes() {
		ArrayTypesContext _localctx = new ArrayTypesContext(Context, State);
		EnterRule(_localctx, 38, RULE_arrayTypes);
		try {
			State = 308;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_TYPE:
				_localctx = new IntArrayTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 299; Match(INT_TYPE);
				State = 300; Match(BRAC_L);
				State = 301; Match(BRAC_R);
				}
				break;
			case DOUBLE_TYPE:
				_localctx = new DoubleArrayTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 302; Match(DOUBLE_TYPE);
				State = 303; Match(BRAC_L);
				State = 304; Match(BRAC_R);
				}
				break;
			case BOOL_TYPE:
				_localctx = new BoolArrayTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 305; Match(BOOL_TYPE);
				State = 306; Match(BRAC_L);
				State = 307; Match(BRAC_R);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreationContext : ParserRuleContext {
		public ArrayCreationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreation; } }
	 
		public ArrayCreationContext() { }
		public virtual void CopyFrom(ArrayCreationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntArrayCreationContext : ArrayCreationContext {
		public ITerminalNode INT_TYPE() { return GetToken(llParser.INT_TYPE, 0); }
		public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public IntArrayCreationContext(ArrayCreationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntArrayCreation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolArrayCreationContext : ArrayCreationContext {
		public ITerminalNode BOOL_TYPE() { return GetToken(llParser.BOOL_TYPE, 0); }
		public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public BoolArrayCreationContext(ArrayCreationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolArrayCreation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleArrayCreationContext : ArrayCreationContext {
		public ITerminalNode DOUBLE_TYPE() { return GetToken(llParser.DOUBLE_TYPE, 0); }
		public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public DoubleArrayCreationContext(ArrayCreationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleArrayCreation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreationContext arrayCreation() {
		ArrayCreationContext _localctx = new ArrayCreationContext(Context, State);
		EnterRule(_localctx, 40, RULE_arrayCreation);
		try {
			State = 325;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_TYPE:
				_localctx = new IntArrayCreationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 310; Match(INT_TYPE);
				State = 311; Match(BRAC_L);
				State = 312; expression(0);
				State = 313; Match(BRAC_R);
				}
				break;
			case DOUBLE_TYPE:
				_localctx = new DoubleArrayCreationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 315; Match(DOUBLE_TYPE);
				State = 316; Match(BRAC_L);
				State = 317; expression(0);
				State = 318; Match(BRAC_R);
				}
				break;
			case BOOL_TYPE:
				_localctx = new BoolArrayCreationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 320; Match(BOOL_TYPE);
				State = 321; Match(BRAC_L);
				State = 322; expression(0);
				State = 323; Match(BRAC_R);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefTypeCreationContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(llParser.NEW, 0); }
		public ArrayCreationContext arrayCreation() {
			return GetRuleContext<ArrayCreationContext>(0);
		}
		public StructCreationContext structCreation() {
			return GetRuleContext<StructCreationContext>(0);
		}
		public RefTypeCreationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refTypeCreation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefTypeCreation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefTypeCreationContext refTypeCreation() {
		RefTypeCreationContext _localctx = new RefTypeCreationContext(Context, State);
		EnterRule(_localctx, 42, RULE_refTypeCreation);
		try {
			State = 331;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 327; Match(NEW);
				State = 328; arrayCreation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 329; Match(NEW);
				State = 330; structCreation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexingContext : ParserRuleContext {
		public VariableExpressionContext variableExpression() {
			return GetRuleContext<VariableExpressionContext>(0);
		}
		public ITerminalNode BRAC_L() { return GetToken(llParser.BRAC_L, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BRAC_R() { return GetToken(llParser.BRAC_R, 0); }
		public ArrayIndexingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndexing; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndexing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexingContext arrayIndexing() {
		ArrayIndexingContext _localctx = new ArrayIndexingContext(Context, State);
		EnterRule(_localctx, 44, RULE_arrayIndexing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; variableExpression();
			State = 334; Match(BRAC_L);
			State = 335; expression(0);
			State = 336; Match(BRAC_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefTypeDestructionContext : ParserRuleContext {
		public ITerminalNode DESTROY() { return GetToken(llParser.DESTROY, 0); }
		public VariableExpressionContext variableExpression() {
			return GetRuleContext<VariableExpressionContext>(0);
		}
		public RefTypeDestructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refTypeDestruction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefTypeDestruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefTypeDestructionContext refTypeDestruction() {
		RefTypeDestructionContext _localctx = new RefTypeDestructionContext(Context, State);
		EnterRule(_localctx, 46, RULE_refTypeDestruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338; Match(DESTROY);
			State = 339; variableExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructPropertiesContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public ITerminalNode COLON() { return GetToken(llParser.COLON, 0); }
		public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		public ITerminalNode SEMCOL() { return GetToken(llParser.SEMCOL, 0); }
		public StructPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structProperties; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructPropertiesContext structProperties() {
		StructPropertiesContext _localctx = new StructPropertiesContext(Context, State);
		EnterRule(_localctx, 48, RULE_structProperties);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; Match(WORD);
			State = 342; Match(COLON);
			State = 343; typeDefinition();
			State = 344; Match(SEMCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		public ITerminalNode STRUCT() { return GetToken(llParser.STRUCT, 0); }
		public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public ITerminalNode CURL_L() { return GetToken(llParser.CURL_L, 0); }
		public ITerminalNode CURL_R() { return GetToken(llParser.CURL_R, 0); }
		public StructPropertiesContext[] structProperties() {
			return GetRuleContexts<StructPropertiesContext>();
		}
		public StructPropertiesContext structProperties(int i) {
			return GetRuleContext<StructPropertiesContext>(i);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 50, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346; Match(STRUCT);
			State = 347; Match(WORD);
			State = 348; Match(CURL_L);
			State = 350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 349; structProperties();
				}
				}
				State = 352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WORD );
			State = 354; Match(CURL_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructNameContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(llParser.WORD, 0); }
		public StructNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructNameContext structName() {
		StructNameContext _localctx = new StructNameContext(Context, State);
		EnterRule(_localctx, 52, RULE_structName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructCreationContext : ParserRuleContext {
		public StructNameContext structName() {
			return GetRuleContext<StructNameContext>(0);
		}
		public ITerminalNode PAR_L() { return GetToken(llParser.PAR_L, 0); }
		public ITerminalNode PAR_R() { return GetToken(llParser.PAR_R, 0); }
		public StructCreationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structCreation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IllVisitor<TResult> typedVisitor = visitor as IllVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructCreation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructCreationContext structCreation() {
		StructCreationContext _localctx = new StructCreationContext(Context, State);
		EnterRule(_localctx, 54, RULE_structCreation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358; structName();
			State = 359; Match(PAR_L);
			State = 360; Match(PAR_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		case 7: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '/', '\x16D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x6', '\x3', '@', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\x41', 
		'\x3', '\x3', '\x5', '\x3', '\x45', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', 'I', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', 'O', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', 'W', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x65', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', 'k', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', 'w', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', 'z', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x80', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xA8', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\xB2', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\xBC', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\xCA', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\xD7', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\xDE', 
		'\n', '\t', '\f', '\t', '\xE', '\t', '\xE1', '\v', '\t', '\x5', '\t', 
		'\xE3', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\a', '\n', '\xF0', '\n', '\n', '\f', '\n', '\xE', 
		'\n', '\xF3', '\v', '\n', '\x5', '\n', '\xF5', '\n', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x5', '\f', '\xFF', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\x103', '\n', '\f', '\x3', '\f', '\x5', '\f', '\x106', 
		'\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\a', 
		'\xE', '\x10C', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x10F', '\v', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x119', 
		'\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', 
		'\x137', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x5', '\x16', '\x148', '\n', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x14E', '\n', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x6', '\x1B', '\x161', '\n', '\x1B', 
		'\r', '\x1B', '\xE', '\x1B', '\x162', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x2', '\x3', '\n', '\x1E', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', '\x2', '\x5', '\x4', '\x2', '\x15', '\x15', '\x18', 
		'\x18', '\x3', '\x2', '\x16', '\x17', '\x3', '\x2', '\n', '\v', '\x2', 
		'\x18E', '\x2', ':', '\x3', '\x2', '\x2', '\x2', '\x4', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\x6', 'H', '\x3', '\x2', '\x2', '\x2', '\b', 'N', 
		'\x3', '\x2', '\x2', '\x2', '\n', 'V', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xE', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\xD8', '\x3', '\x2', '\x2', '\x2', '\x12', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x18', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x109', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x118', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x11A', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x11E', '\x3', '\x2', '\x2', '\x2', '\"', '\x122', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x126', '\x3', '\x2', '\x2', '\x2', '&', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '(', '\x136', '\x3', '\x2', '\x2', '\x2', '*', '\x147', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x30', '\x154', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x157', '\x3', '\x2', '\x2', '\x2', '\x34', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x168', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x5', '\x4', '\x3', 
		'\x2', ';', '<', '\a', '\x2', '\x2', '\x3', '<', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '=', '@', '\x5', '\x12', '\n', '\x2', '>', '@', '\x5', '\x34', 
		'\x1B', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', '?', '>', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x45', '\x3', '\x2', '\x2', '\x2', '\x43', '\x45', '\x5', 
		'\x6', '\x4', '\x2', '\x44', '?', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'I', '\x5', '\f', '\a', '\x2', 'G', 'I', '\x5', '\n', '\x6', 
		'\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'I', '\a', '\x3', '\x2', '\x2', '\x2', 'J', 'O', '\x5', 
		'\f', '\a', '\x2', 'K', 'L', '\x5', '\n', '\x6', '\x2', 'L', 'M', '\a', 
		'!', '\x2', '\x2', 'M', 'O', '\x3', '\x2', '\x2', '\x2', 'N', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'K', '\x3', '\x2', '\x2', '\x2', 'O', '\t', 
		'\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\b', '\x6', '\x1', '\x2', 'Q', 
		'R', '\a', '\x1A', '\x2', '\x2', 'R', 'S', '\x5', '\n', '\x6', '\x2', 
		'S', 'T', '\a', '\x1B', '\x2', '\x2', 'T', 'W', '\x3', '\x2', '\x2', '\x2', 
		'U', 'W', '\x5', '\xE', '\b', '\x2', 'V', 'P', '\x3', '\x2', '\x2', '\x2', 
		'V', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'x', '\x3', '\x2', '\x2', '\x2', 
		'X', 'Y', '\f', '\v', '\x2', '\x2', 'Y', 'Z', '\t', '\x2', '\x2', '\x2', 
		'Z', 'w', '\x5', '\n', '\x6', '\f', '[', '\\', '\f', '\n', '\x2', '\x2', 
		'\\', ']', '\t', '\x3', '\x2', '\x2', ']', 'w', '\x5', '\n', '\x6', '\v', 
		'^', '_', '\f', '\t', '\x2', '\x2', '_', '`', '\a', '\"', '\x2', '\x2', 
		'`', 'w', '\x5', '\n', '\x6', '\n', '\x61', '\x62', '\f', '\b', '\x2', 
		'\x2', '\x62', '\x64', '\a', '\'', '\x2', '\x2', '\x63', '\x65', '\a', 
		'\x1C', '\x2', '\x2', '\x64', '\x63', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'w', '\x5', '\n', '\x6', '\t', 'g', 'h', '\f', '\a', '\x2', 
		'\x2', 'h', 'j', '\a', '(', '\x2', '\x2', 'i', 'k', '\a', '\x1C', '\x2', 
		'\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'w', '\x5', '\n', '\x6', 
		'\b', 'm', 'n', '\f', '\x6', '\x2', '\x2', 'n', 'o', '\a', ',', '\x2', 
		'\x2', 'o', 'w', '\x5', '\n', '\x6', '\a', 'p', 'q', '\f', '\x5', '\x2', 
		'\x2', 'q', 'r', '\a', '-', '\x2', '\x2', 'r', 'w', '\x5', '\n', '\x6', 
		'\x6', 's', 't', '\f', '\x4', '\x2', '\x2', 't', 'u', '\a', '.', '\x2', 
		'\x2', 'u', 'w', '\x5', '\n', '\x6', '\x5', 'v', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'v', '[', '\x3', '\x2', '\x2', '\x2', 'v', '^', '\x3', '\x2', '\x2', 
		'\x2', 'v', '\x61', '\x3', '\x2', '\x2', '\x2', 'v', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'm', '\x3', '\x2', '\x2', '\x2', 'v', 'p', '\x3', '\x2', 
		'\x2', '\x2', 'v', 's', '\x3', '\x2', '\x2', '\x2', 'w', 'z', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', 
		'\x2', '\x2', 'y', '\v', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', 
		'\x2', '\x2', '\x2', '{', '|', '\a', '\x14', '\x2', '\x2', '|', '\x7F', 
		'\a', '\x1C', '\x2', '\x2', '}', '\x80', '\x5', '\n', '\x6', '\x2', '~', 
		'\x80', '\x5', ',', '\x17', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x81', '\x82', '\a', '!', '\x2', '\x2', '\x82', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x5', '.', '\x18', '\x2', 
		'\x84', '\x85', '\a', '\x1C', '\x2', '\x2', '\x85', '\x86', '\x5', '\n', 
		'\x6', '\x2', '\x86', '\x87', '\a', '!', '\x2', '\x2', '\x87', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\a', '\x14', '\x2', '\x2', 
		'\x89', '\x8A', '\a', '#', '\x2', '\x2', '\x8A', '\x8B', '\x5', '\n', 
		'\x6', '\x2', '\x8B', '\x8C', '\a', '!', '\x2', '\x2', '\x8C', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', '\x14', '\x2', '\x2', 
		'\x8E', '\x8F', '\a', '$', '\x2', '\x2', '\x8F', '\x90', '\x5', '\n', 
		'\x6', '\x2', '\x90', '\x91', '\a', '!', '\x2', '\x2', '\x91', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', '\x14', '\x2', '\x2', 
		'\x93', '\x94', '\a', '%', '\x2', '\x2', '\x94', '\x95', '\x5', '\n', 
		'\x6', '\x2', '\x95', '\x96', '\a', '!', '\x2', '\x2', '\x96', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\a', '\x14', '\x2', '\x2', 
		'\x98', '\x99', '\a', '&', '\x2', '\x2', '\x99', '\x9A', '\x5', '\n', 
		'\x6', '\x2', '\x9A', '\x9B', '\a', '!', '\x2', '\x2', '\x9B', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\a', '\x14', '\x2', '\x2', 
		'\x9D', '\x9E', '\a', ')', '\x2', '\x2', '\x9E', '\x9F', '\x5', '\x1C', 
		'\xF', '\x2', '\x9F', '\xA0', '\a', '!', '\x2', '\x2', '\xA0', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\a', '\x14', '\x2', '\x2', 
		'\xA2', '\xA3', '\a', ')', '\x2', '\x2', '\xA3', '\xA4', '\x5', '\x1C', 
		'\xF', '\x2', '\xA4', '\xA7', '\a', '\x1C', '\x2', '\x2', '\xA5', '\xA8', 
		'\x5', '\n', '\x6', '\x2', '\xA6', '\xA8', '\x5', ',', '\x17', '\x2', 
		'\xA7', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', 
		'\a', '!', '\x2', '\x2', '\xAA', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAC', '\x5', '\x30', '\x19', '\x2', '\xAC', '\xAD', '\a', '!', '\x2', 
		'\x2', '\xAD', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB1', '\a', 
		'\x5', '\x2', '\x2', '\xAF', '\xB2', '\x5', '\n', '\x6', '\x2', '\xB0', 
		'\xB2', '\x5', ',', '\x17', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xCA', '\a', '!', '\x2', '\x2', '\xB4', '\xB5', '\a', '\f', '\x2', '\x2', 
		'\xB5', '\xB6', '\a', '\x1A', '\x2', '\x2', '\xB6', '\xB7', '\x5', '\x6', 
		'\x4', '\x2', '\xB7', '\xB8', '\a', '\x1B', '\x2', '\x2', '\xB8', '\xBB', 
		'\x5', '\x1A', '\xE', '\x2', '\xB9', '\xBA', '\a', '\r', '\x2', '\x2', 
		'\xBA', '\xBC', '\x5', '\x1A', '\xE', '\x2', '\xBB', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\a', '\xE', '\x2', '\x2', 
		'\xBE', '\xBF', '\a', '\x1A', '\x2', '\x2', '\xBF', '\xC0', '\x5', '\x6', 
		'\x4', '\x2', '\xC0', '\xC1', '\a', '\x1B', '\x2', '\x2', '\xC1', '\xC2', 
		'\x5', '\x1A', '\xE', '\x2', '\xC2', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xC3', '\xC4', '\a', '\xF', '\x2', '\x2', '\xC4', '\xC5', '\a', '\x1A', 
		'\x2', '\x2', '\xC5', '\xC6', '\x5', '\n', '\x6', '\x2', '\xC6', '\xC7', 
		'\a', '\x1B', '\x2', '\x2', '\xC7', '\xC8', '\a', '!', '\x2', '\x2', '\xC8', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '\xC9', '{', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\x83', '\x3', '\x2', '\x2', '\x2', '\xC9', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\x8D', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\xC9', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\x9C', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\r', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xD7', '\x5', '\x16', '\f', '\x2', '\xCC', '\xD7', '\x5', '\x18', '\r', 
		'\x2', '\xCD', '\xD7', '\x5', '\x10', '\t', '\x2', '\xCE', '\xD7', '\x5', 
		'\x14', '\v', '\x2', '\xCF', '\xD7', '\x5', '\x1E', '\x10', '\x2', '\xD0', 
		'\xD7', '\x5', ' ', '\x11', '\x2', '\xD1', '\xD7', '\x5', '$', '\x13', 
		'\x2', '\xD2', '\xD7', '\x5', '\"', '\x12', '\x2', '\xD3', '\xD7', '\x5', 
		'&', '\x14', '\x2', '\xD4', '\xD7', '\x5', '.', '\x18', '\x2', '\xD5', 
		'\xD7', '\a', '\x12', '\x2', '\x2', '\xD6', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xD6', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '\xD6', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xF', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\a', 
		'\x14', '\x2', '\x2', '\xD9', '\xE2', '\a', '\x1A', '\x2', '\x2', '\xDA', 
		'\xDF', '\x5', '\n', '\x6', '\x2', '\xDB', '\xDC', '\a', '*', '\x2', '\x2', 
		'\xDC', '\xDE', '\x5', '\n', '\x6', '\x2', '\xDD', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '\xE2', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', 
		'\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\xE5', '\a', '\x1B', '\x2', '\x2', '\xE5', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\xE7', '\a', '\x14', '\x2', '\x2', '\xE7', '\xF4', 
		'\a', '\x1A', '\x2', '\x2', '\xE8', '\xE9', '\a', '\x14', '\x2', '\x2', 
		'\xE9', '\xEA', '\a', ')', '\x2', '\x2', '\xEA', '\xF1', '\x5', '\x1C', 
		'\xF', '\x2', '\xEB', '\xEC', '\a', '*', '\x2', '\x2', '\xEC', '\xED', 
		'\a', '\x14', '\x2', '\x2', '\xED', '\xEE', '\a', ')', '\x2', '\x2', '\xEE', 
		'\xF0', '\x5', '\x1C', '\xF', '\x2', '\xEF', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xEF', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xF5', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', 
		'\xF7', '\a', '\x1B', '\x2', '\x2', '\xF7', '\xF8', '\a', ')', '\x2', 
		'\x2', '\xF8', '\xF9', '\x5', '\x1C', '\xF', '\x2', '\xF9', '\xFA', '\x5', 
		'\x1A', '\xE', '\x2', '\xFA', '\x13', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'\xFC', '\a', '\x14', '\x2', '\x2', '\xFC', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\xFF', '\t', '\x3', '\x2', '\x2', '\xFE', '\xFD', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', 
		'\x100', '\x3', '\x2', '\x2', '\x2', '\x100', '\x106', '\a', '\x3', '\x2', 
		'\x2', '\x101', '\x103', '\t', '\x3', '\x2', '\x2', '\x102', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x104', '\x3', '\x2', '\x2', '\x2', '\x104', '\x106', '\a', 
		'\x4', '\x2', '\x2', '\x105', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x105', 
		'\x102', '\x3', '\x2', '\x2', '\x2', '\x106', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\x108', '\t', '\x4', '\x2', '\x2', '\x108', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '\x10D', '\a', '\x1D', '\x2', '\x2', '\x10A', 
		'\x10C', '\x5', '\b', '\x5', '\x2', '\x10B', '\x10A', '\x3', '\x2', '\x2', 
		'\x2', '\x10C', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x110', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\x111', '\a', '\x1E', '\x2', '\x2', '\x111', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x112', '\x119', '\a', '\x6', '\x2', 
		'\x2', '\x113', '\x119', '\a', '\a', '\x2', '\x2', '\x114', '\x119', '\a', 
		'\b', '\x2', '\x2', '\x115', '\x119', '\a', '\t', '\x2', '\x2', '\x116', 
		'\x119', '\x5', '(', '\x15', '\x2', '\x117', '\x119', '\x5', '\x36', '\x1C', 
		'\x2', '\x118', '\x112', '\x3', '\x2', '\x2', '\x2', '\x118', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'\x118', '\x115', '\x3', '\x2', '\x2', '\x2', '\x118', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x117', '\x3', '\x2', '\x2', '\x2', '\x119', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\x5', '\x14', '\v', 
		'\x2', '\x11B', '\x11C', '\a', '\x16', '\x2', '\x2', '\x11C', '\x11D', 
		'\a', '\x16', '\x2', '\x2', '\x11D', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x11E', '\x11F', '\x5', '\x14', '\v', '\x2', '\x11F', '\x120', '\a', 
		'\x17', '\x2', '\x2', '\x120', '\x121', '\a', '\x17', '\x2', '\x2', '\x121', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', '\a', '\x16', '\x2', 
		'\x2', '\x123', '\x124', '\a', '\x16', '\x2', '\x2', '\x124', '\x125', 
		'\x5', '\x14', '\v', '\x2', '\x125', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x126', '\x127', '\a', '\x17', '\x2', '\x2', '\x127', '\x128', '\a', 
		'\x17', '\x2', '\x2', '\x128', '\x129', '\x5', '\x14', '\v', '\x2', '\x129', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\a', '+', '\x2', '\x2', 
		'\x12B', '\x12C', '\x5', '\n', '\x6', '\x2', '\x12C', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x12D', '\x12E', '\a', '\x6', '\x2', '\x2', '\x12E', '\x12F', 
		'\a', '\x1F', '\x2', '\x2', '\x12F', '\x137', '\a', ' ', '\x2', '\x2', 
		'\x130', '\x131', '\a', '\a', '\x2', '\x2', '\x131', '\x132', '\a', '\x1F', 
		'\x2', '\x2', '\x132', '\x137', '\a', ' ', '\x2', '\x2', '\x133', '\x134', 
		'\a', '\b', '\x2', '\x2', '\x134', '\x135', '\a', '\x1F', '\x2', '\x2', 
		'\x135', '\x137', '\a', ' ', '\x2', '\x2', '\x136', '\x12D', '\x3', '\x2', 
		'\x2', '\x2', '\x136', '\x130', '\x3', '\x2', '\x2', '\x2', '\x136', '\x133', 
		'\x3', '\x2', '\x2', '\x2', '\x137', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x139', '\a', '\x6', '\x2', '\x2', '\x139', '\x13A', '\a', '\x1F', 
		'\x2', '\x2', '\x13A', '\x13B', '\x5', '\n', '\x6', '\x2', '\x13B', '\x13C', 
		'\a', ' ', '\x2', '\x2', '\x13C', '\x148', '\x3', '\x2', '\x2', '\x2', 
		'\x13D', '\x13E', '\a', '\a', '\x2', '\x2', '\x13E', '\x13F', '\a', '\x1F', 
		'\x2', '\x2', '\x13F', '\x140', '\x5', '\n', '\x6', '\x2', '\x140', '\x141', 
		'\a', ' ', '\x2', '\x2', '\x141', '\x148', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '\x143', '\a', '\b', '\x2', '\x2', '\x143', '\x144', '\a', '\x1F', 
		'\x2', '\x2', '\x144', '\x145', '\x5', '\n', '\x6', '\x2', '\x145', '\x146', 
		'\a', ' ', '\x2', '\x2', '\x146', '\x148', '\x3', '\x2', '\x2', '\x2', 
		'\x147', '\x138', '\x3', '\x2', '\x2', '\x2', '\x147', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '\x147', '\x142', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\a', '\x10', '\x2', 
		'\x2', '\x14A', '\x14E', '\x5', '*', '\x16', '\x2', '\x14B', '\x14C', 
		'\a', '\x10', '\x2', '\x2', '\x14C', '\x14E', '\x5', '\x38', '\x1D', '\x2', 
		'\x14D', '\x149', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '\x14E', '-', '\x3', '\x2', '\x2', '\x2', '\x14F', 
		'\x150', '\x5', '\x14', '\v', '\x2', '\x150', '\x151', '\a', '\x1F', '\x2', 
		'\x2', '\x151', '\x152', '\x5', '\n', '\x6', '\x2', '\x152', '\x153', 
		'\a', ' ', '\x2', '\x2', '\x153', '/', '\x3', '\x2', '\x2', '\x2', '\x154', 
		'\x155', '\a', '\x11', '\x2', '\x2', '\x155', '\x156', '\x5', '\x14', 
		'\v', '\x2', '\x156', '\x31', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', 
		'\a', '\x14', '\x2', '\x2', '\x158', '\x159', '\a', ')', '\x2', '\x2', 
		'\x159', '\x15A', '\x5', '\x1C', '\xF', '\x2', '\x15A', '\x15B', '\a', 
		'!', '\x2', '\x2', '\x15B', '\x33', '\x3', '\x2', '\x2', '\x2', '\x15C', 
		'\x15D', '\a', '\x13', '\x2', '\x2', '\x15D', '\x15E', '\a', '\x14', '\x2', 
		'\x2', '\x15E', '\x160', '\a', '\x1D', '\x2', '\x2', '\x15F', '\x161', 
		'\x5', '\x32', '\x1A', '\x2', '\x160', '\x15F', '\x3', '\x2', '\x2', '\x2', 
		'\x161', '\x162', '\x3', '\x2', '\x2', '\x2', '\x162', '\x160', '\x3', 
		'\x2', '\x2', '\x2', '\x162', '\x163', '\x3', '\x2', '\x2', '\x2', '\x163', 
		'\x164', '\x3', '\x2', '\x2', '\x2', '\x164', '\x165', '\a', '\x1E', '\x2', 
		'\x2', '\x165', '\x35', '\x3', '\x2', '\x2', '\x2', '\x166', '\x167', 
		'\a', '\x14', '\x2', '\x2', '\x167', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x168', '\x169', '\x5', '\x36', '\x1C', '\x2', '\x169', '\x16A', '\a', 
		'\x1A', '\x2', '\x2', '\x16A', '\x16B', '\a', '\x1B', '\x2', '\x2', '\x16B', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x1F', '?', '\x41', '\x44', 'H', 
		'N', 'V', '\x64', 'j', 'v', 'x', '\x7F', '\xA7', '\xB1', '\xBB', '\xC9', 
		'\xD6', '\xDF', '\xE2', '\xF1', '\xF4', '\xFE', '\x102', '\x105', '\x10D', 
		'\x118', '\x136', '\x147', '\x14D', '\x162',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ll
